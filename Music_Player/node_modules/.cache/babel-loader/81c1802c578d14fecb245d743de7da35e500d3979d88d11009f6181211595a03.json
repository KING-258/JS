{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar MediaTagReader = require('./MediaTagReader');\n/* The first 4 bytes of a FLAC file describes the header for the file. If these\n * bytes respectively read \"fLaC\", we can determine it is a FLAC file.\n */\n\nvar FLAC_HEADER_SIZE = 4;\n/* FLAC metadata is stored in blocks containing data ranging from STREAMINFO to\n * VORBIS_COMMENT, which is what we want to work with.\n *\n * Each metadata header is 4 bytes long, with the first byte determining whether\n * it is the last metadata block before the audio data and what the block type is.\n * This first byte can further be split into 8 bits, with the first bit being the\n * last-metadata-block flag, and the last three bits being the block type.\n *\n * Since the specification states that the decimal value for a VORBIS_COMMENT block\n * type is 4, the two possibilities for the comment block header values are:\n * - 00000100 (Not a last metadata comment block, value of 4)\n * - 10000100 (A last metadata comment block, value of 132)\n *\n * Similarly, the picture block header values are 6 and 128.\n *\n * All values for METADATA_BLOCK_HEADER can be found here.\n * https://xiph.org/flac/format.html#metadata_block_header\n */\n\nvar COMMENT_HEADERS = [4, 132];\nvar PICTURE_HEADERS = [6, 134]; // These are the possible image types as defined by the FLAC specification.\n\nvar IMAGE_TYPES = [\"Other\", \"32x32 pixels 'file icon' (PNG only)\", \"Other file icon\", \"Cover (front)\", \"Cover (back)\", \"Leaflet page\", \"Media (e.g. label side of CD)\", \"Lead artist/lead performer/soloist\", \"Artist/performer\", \"Conductor\", \"Band/Orchestra\", \"Composer\", \"Lyricist/text writer\", \"Recording Location\", \"During recording\", \"During performance\", \"Movie/video screen capture\", \"A bright coloured fish\", \"Illustration\", \"Band/artist logotype\", \"Publisher/Studio logotype\"];\n\n/**\n * Class representing a MediaTagReader that parses FLAC tags.\n */\nvar FLACTagReader = /*#__PURE__*/function (_MediaTagReader) {\n  _inherits(FLACTagReader, _MediaTagReader);\n  var _super = _createSuper(FLACTagReader);\n  function FLACTagReader() {\n    var _this;\n    _classCallCheck(this, FLACTagReader);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"_commentOffset\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_pictureOffset\", void 0);\n    return _this;\n  }\n  _createClass(FLACTagReader, [{\n    key: \"_loadData\",\n    value:\n    /**\n     * Function called to load the data from the file.\n     *\n     * To begin processing the blocks, the next 4 bytes after the initial 4 bytes\n     * (bytes 4 through 7) are loaded. From there, the rest of the loading process\n     * is passed on to the _loadBlock function, which will handle the rest of the\n     * parsing for the metadata blocks.\n     *\n     * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\n     * @param {LoadCallbackType} callbacks - The callback to call once _loadData is completed.\n     */\n    function _loadData(mediaFileReader, callbacks) {\n      var self = this;\n      mediaFileReader.loadRange([4, 7], {\n        onSuccess: function onSuccess() {\n          self._loadBlock(mediaFileReader, 4, callbacks);\n        }\n      });\n    }\n    /**\n     * Special internal function used to parse the different FLAC blocks.\n     *\n     * The FLAC specification doesn't specify a specific location for metadata to resign, but\n     * dictates that it may be in one of various blocks located throughout the file. To load the\n     * metadata, we must locate the header first. This can be done by reading the first byte of\n     * each block to determine the block type. After the block type comes a 24 bit integer that stores\n     * the length of the block as big endian. Using this, we locate the block and store the offset for\n     * parsing later.\n     *\n     * After each block has been parsed, the _nextBlock function is called in order\n     * to parse the information of the next block. All blocks need to be parsed in order to find\n     * all of the picture and comment blocks.\n     *\n     * More info on the FLAC specification may be found here:\n     * https://xiph.org/flac/format.html\n     * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\n     * @param {number} offset - The offset to start checking the header from.\n     * @param {LoadCallbackType} callbacks - The callback to call once the header has been found.\n     */\n  }, {\n    key: \"_loadBlock\",\n    value: function _loadBlock(mediaFileReader, offset, callbacks) {\n      var self = this;\n      /* As mentioned above, this first byte is loaded to see what metadata type\n       * this block represents.\n       */\n\n      var blockHeader = mediaFileReader.getByteAt(offset);\n      /* The last three bytes (integer 24) contain a value representing the length\n       * of the following metadata block. The 1 is added in order to shift the offset\n       * by one to get the last three bytes in the block header.\n       */\n\n      var blockSize = mediaFileReader.getInteger24At(offset + 1, true);\n      /* This conditional checks if blockHeader (the byte retrieved representing the\n       * type of the header) is one the headers we are looking for.\n       *\n       * If that is not true, the block is skipped over and the next range is loaded:\n       * - offset + 4 + blockSize adds 4 to skip over the initial metadata header and\n       * blockSize to skip over the block overall, placing it at the head of the next\n       * metadata header.\n       * - offset + 4 + 4 + blockSize does the same thing as the previous block with\n       * the exception of adding another 4 bytes to move it to the end of the new metadata\n       * header.\n       */\n\n      if (COMMENT_HEADERS.indexOf(blockHeader) !== -1) {\n        /* 4 is added to offset to move it to the head of the actual metadata.\n         * The range starting from offsetMatadata (the beginning of the block)\n         * and offsetMetadata + blockSize (the end of the block) is loaded.\n         */\n        var offsetMetadata = offset + 4;\n        mediaFileReader.loadRange([offsetMetadata, offsetMetadata + blockSize], {\n          onSuccess: function onSuccess() {\n            self._commentOffset = offsetMetadata;\n            self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\n          }\n        });\n      } else if (PICTURE_HEADERS.indexOf(blockHeader) !== -1) {\n        var offsetMetadata = offset + 4;\n        mediaFileReader.loadRange([offsetMetadata, offsetMetadata + blockSize], {\n          onSuccess: function onSuccess() {\n            self._pictureOffset = offsetMetadata;\n            self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\n          }\n        });\n      } else {\n        self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\n      }\n    }\n    /**\n     * Internal function used to load the next range and respective block.\n     *\n     * If the metadata block that was identified is not the last block before the\n     * audio blocks, the function will continue loading the next blocks. If it is\n     * the last block (identified by any values greater than 127, see FLAC spec.),\n     * the function will determine whether a comment block had been identified.\n     *\n     * If the block does not exist, the error callback is called. Otherwise, the function\n     * will call the success callback, allowing data parsing to begin.\n     * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\n     * @param {number} offset - The offset that the existing header was located at.\n     * @param {number} blockHeader - An integer reflecting the header type of the block.\n     * @param {number} blockSize - The size of the previously processed header.\n     * @param {LoadCallbackType} callbacks - The callback functions to be called.\n     */\n  }, {\n    key: \"_nextBlock\",\n    value: function _nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks) {\n      var self = this;\n      if (blockHeader > 127) {\n        if (!self._commentOffset) {\n          callbacks.onError({\n            \"type\": \"loadData\",\n            \"info\": \"Comment block could not be found.\"\n          });\n        } else {\n          callbacks.onSuccess();\n        }\n      } else {\n        mediaFileReader.loadRange([offset + 4 + blockSize, offset + 4 + 4 + blockSize], {\n          onSuccess: function onSuccess() {\n            self._loadBlock(mediaFileReader, offset + 4 + blockSize, callbacks);\n          }\n        });\n      }\n    }\n    /**\n     * Parses the data and returns the tags.\n     *\n     * This is an overview of the VorbisComment format and what this function attempts to\n     * retrieve:\n     * - First 4 bytes: a long that contains the length of the vendor string.\n     * - Next n bytes: the vendor string encoded in UTF-8.\n     * - Next 4 bytes: a long representing how many comments are in this block\n     * For each comment that exists:\n     * - First 4 bytes: a long representing the length of the comment\n     * - Next n bytes: the comment encoded in UTF-8.\n     * The comment string will usually appear in a format similar to:\n     * ARTIST=me\n     *\n     * Note that the longs and integers in this block are encoded in little endian\n     * as opposed to big endian for the rest of the FLAC spec.\n     * @param {MediaFileReader} data - The MediaFileReader to parse the file with.\n     * @param {Array<string>} [tags] - Optional tags to also be retrieved from the file.\n     * @return {TagType} - An object containing the tag information for the file.\n     */\n  }, {\n    key: \"_parseData\",\n    value: function _parseData(data, tags) {\n      var vendorLength = data.getLongAt(this._commentOffset, false);\n      var offsetVendor = this._commentOffset + 4;\n      /* This line is able to retrieve the vendor string that the VorbisComment block\n       * contains. However, it is not part of the tags that JSMediaTags normally retrieves,\n       * and is therefore commented out.\n       */\n      // var vendor = data.getStringWithCharsetAt(offsetVendor, vendorLength, \"utf-8\").toString();\n\n      var offsetList = vendorLength + offsetVendor;\n      /* To get the metadata from the block, we first get the long that contains the\n       * number of actual comment values that are existent within the block.\n       *\n       * As we loop through all of the comment blocks, we get the data length in order to\n       * get the right size string, and then determine which category that string falls under.\n       * The dataOffset variable is constantly updated so that it is at the beginning of the\n       * comment that is currently being parsed.\n       *\n       * Additions of 4 here are used to move the offset past the first 4 bytes which only contain\n       * the length of the comment.\n       */\n\n      var numComments = data.getLongAt(offsetList, false);\n      var dataOffset = offsetList + 4;\n      var title, artist, album, track, genre, picture;\n      for (var i = 0; i < numComments; i++) {\n        var _dataLength = data.getLongAt(dataOffset, false);\n        var s = data.getStringWithCharsetAt(dataOffset + 4, _dataLength, \"utf-8\").toString();\n        var d = s.indexOf(\"=\");\n        var split = [s.slice(0, d), s.slice(d + 1)];\n        switch (split[0].toUpperCase()) {\n          case \"TITLE\":\n            title = split[1];\n            break;\n          case \"ARTIST\":\n            artist = split[1];\n            break;\n          case \"ALBUM\":\n            album = split[1];\n            break;\n          case \"TRACKNUMBER\":\n            track = split[1];\n            break;\n          case \"GENRE\":\n            genre = split[1];\n            break;\n        }\n        dataOffset += 4 + _dataLength;\n      }\n      /* If a picture offset was found and assigned, then the reader will start processing\n       * the picture block from that point.\n       *\n       * All the lengths for the picture data can be found online here:\n       * https://xiph.org/flac/format.html#metadata_block_picture\n       */\n\n      if (this._pictureOffset) {\n        var imageType = data.getLongAt(this._pictureOffset, true);\n        var offsetMimeLength = this._pictureOffset + 4;\n        var mimeLength = data.getLongAt(offsetMimeLength, true);\n        var offsetMime = offsetMimeLength + 4;\n        var mime = data.getStringAt(offsetMime, mimeLength);\n        var offsetDescriptionLength = offsetMime + mimeLength;\n        var descriptionLength = data.getLongAt(offsetDescriptionLength, true);\n        var offsetDescription = offsetDescriptionLength + 4;\n        var description = data.getStringWithCharsetAt(offsetDescription, descriptionLength, \"utf-8\").toString();\n        var offsetDataLength = offsetDescription + descriptionLength + 16;\n        var dataLength = data.getLongAt(offsetDataLength, true);\n        var offsetData = offsetDataLength + 4;\n        var imageData = data.getBytesAt(offsetData, dataLength, true);\n        picture = {\n          format: mime,\n          type: IMAGE_TYPES[imageType],\n          description: description,\n          data: imageData\n        };\n      }\n      var tag = {\n        type: \"FLAC\",\n        version: \"1\",\n        tags: {\n          \"title\": title,\n          \"artist\": artist,\n          \"album\": album,\n          \"track\": track,\n          \"genre\": genre,\n          \"picture\": picture\n        }\n      };\n      return tag;\n    }\n  }], [{\n    key: \"getTagIdentifierByteRange\",\n    value:\n    /**\n     * Gets the byte range for the tag identifier.\n     *\n     * Because the Vorbis comment block is not guaranteed to be in a specified\n     * location, we can only load the first 4 bytes of the file to confirm it\n     * is a FLAC first.\n     *\n     * @return {ByteRange} The byte range that identifies the tag for a FLAC.\n     */\n    function getTagIdentifierByteRange() {\n      return {\n        offset: 0,\n        length: FLAC_HEADER_SIZE\n      };\n    }\n    /**\n     * Determines whether or not this reader can read a certain tag format.\n     *\n     * This checks that the first 4 characters in the file are fLaC, which\n     * according to the FLAC file specification should be the characters that\n     * indicate a FLAC file.\n     *\n     * @return {boolean} True if the header is fLaC, false otherwise.\n     */\n  }, {\n    key: \"canReadTagFormat\",\n    value: function canReadTagFormat(tagIdentifier) {\n      var id = String.fromCharCode.apply(String, tagIdentifier.slice(0, 4));\n      return id === 'fLaC';\n    }\n  }]);\n  return FLACTagReader;\n}(MediaTagReader);\nmodule.exports = FLACTagReader;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_defineProperty","MediaTagReader","require","FLAC_HEADER_SIZE","COMMENT_HEADERS","PICTURE_HEADERS","IMAGE_TYPES","FLACTagReader","_MediaTagReader","_super","_this","_len","args","Array","_key","concat","_loadData","mediaFileReader","callbacks","loadRange","onSuccess","_loadBlock","offset","blockHeader","getByteAt","blockSize","getInteger24At","indexOf","offsetMetadata","_commentOffset","_nextBlock","_pictureOffset","onError","_parseData","data","tags","vendorLength","getLongAt","offsetVendor","offsetList","numComments","dataOffset","title","artist","album","track","genre","picture","_dataLength","s","getStringWithCharsetAt","toString","d","split","slice","toUpperCase","imageType","offsetMimeLength","mimeLength","offsetMime","mime","getStringAt","offsetDescriptionLength","descriptionLength","offsetDescription","description","offsetDataLength","dataLength","offsetData","imageData","getBytesAt","format","type","tag","version","getTagIdentifierByteRange","canReadTagFormat","tagIdentifier","id","String","fromCharCode","module","exports"],"sources":["/home/el_professor258/Documents/music/node_modules/jsmediatags/build2/FLACTagReader.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar MediaTagReader = require('./MediaTagReader');\n/* The first 4 bytes of a FLAC file describes the header for the file. If these\n * bytes respectively read \"fLaC\", we can determine it is a FLAC file.\n */\n\n\nvar FLAC_HEADER_SIZE = 4;\n/* FLAC metadata is stored in blocks containing data ranging from STREAMINFO to\n * VORBIS_COMMENT, which is what we want to work with.\n *\n * Each metadata header is 4 bytes long, with the first byte determining whether\n * it is the last metadata block before the audio data and what the block type is.\n * This first byte can further be split into 8 bits, with the first bit being the\n * last-metadata-block flag, and the last three bits being the block type.\n *\n * Since the specification states that the decimal value for a VORBIS_COMMENT block\n * type is 4, the two possibilities for the comment block header values are:\n * - 00000100 (Not a last metadata comment block, value of 4)\n * - 10000100 (A last metadata comment block, value of 132)\n *\n * Similarly, the picture block header values are 6 and 128.\n *\n * All values for METADATA_BLOCK_HEADER can be found here.\n * https://xiph.org/flac/format.html#metadata_block_header\n */\n\nvar COMMENT_HEADERS = [4, 132];\nvar PICTURE_HEADERS = [6, 134]; // These are the possible image types as defined by the FLAC specification.\n\nvar IMAGE_TYPES = [\"Other\", \"32x32 pixels 'file icon' (PNG only)\", \"Other file icon\", \"Cover (front)\", \"Cover (back)\", \"Leaflet page\", \"Media (e.g. label side of CD)\", \"Lead artist/lead performer/soloist\", \"Artist/performer\", \"Conductor\", \"Band/Orchestra\", \"Composer\", \"Lyricist/text writer\", \"Recording Location\", \"During recording\", \"During performance\", \"Movie/video screen capture\", \"A bright coloured fish\", \"Illustration\", \"Band/artist logotype\", \"Publisher/Studio logotype\"];\n\n/**\n * Class representing a MediaTagReader that parses FLAC tags.\n */\nvar FLACTagReader = /*#__PURE__*/function (_MediaTagReader) {\n  _inherits(FLACTagReader, _MediaTagReader);\n\n  var _super = _createSuper(FLACTagReader);\n\n  function FLACTagReader() {\n    var _this;\n\n    _classCallCheck(this, FLACTagReader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_commentOffset\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_pictureOffset\", void 0);\n\n    return _this;\n  }\n\n  _createClass(FLACTagReader, [{\n    key: \"_loadData\",\n    value:\n    /**\n     * Function called to load the data from the file.\n     *\n     * To begin processing the blocks, the next 4 bytes after the initial 4 bytes\n     * (bytes 4 through 7) are loaded. From there, the rest of the loading process\n     * is passed on to the _loadBlock function, which will handle the rest of the\n     * parsing for the metadata blocks.\n     *\n     * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\n     * @param {LoadCallbackType} callbacks - The callback to call once _loadData is completed.\n     */\n    function _loadData(mediaFileReader, callbacks) {\n      var self = this;\n      mediaFileReader.loadRange([4, 7], {\n        onSuccess: function onSuccess() {\n          self._loadBlock(mediaFileReader, 4, callbacks);\n        }\n      });\n    }\n    /**\n     * Special internal function used to parse the different FLAC blocks.\n     *\n     * The FLAC specification doesn't specify a specific location for metadata to resign, but\n     * dictates that it may be in one of various blocks located throughout the file. To load the\n     * metadata, we must locate the header first. This can be done by reading the first byte of\n     * each block to determine the block type. After the block type comes a 24 bit integer that stores\n     * the length of the block as big endian. Using this, we locate the block and store the offset for\n     * parsing later.\n     *\n     * After each block has been parsed, the _nextBlock function is called in order\n     * to parse the information of the next block. All blocks need to be parsed in order to find\n     * all of the picture and comment blocks.\n     *\n     * More info on the FLAC specification may be found here:\n     * https://xiph.org/flac/format.html\n     * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\n     * @param {number} offset - The offset to start checking the header from.\n     * @param {LoadCallbackType} callbacks - The callback to call once the header has been found.\n     */\n\n  }, {\n    key: \"_loadBlock\",\n    value: function _loadBlock(mediaFileReader, offset, callbacks) {\n      var self = this;\n      /* As mentioned above, this first byte is loaded to see what metadata type\n       * this block represents.\n       */\n\n      var blockHeader = mediaFileReader.getByteAt(offset);\n      /* The last three bytes (integer 24) contain a value representing the length\n       * of the following metadata block. The 1 is added in order to shift the offset\n       * by one to get the last three bytes in the block header.\n       */\n\n      var blockSize = mediaFileReader.getInteger24At(offset + 1, true);\n      /* This conditional checks if blockHeader (the byte retrieved representing the\n       * type of the header) is one the headers we are looking for.\n       *\n       * If that is not true, the block is skipped over and the next range is loaded:\n       * - offset + 4 + blockSize adds 4 to skip over the initial metadata header and\n       * blockSize to skip over the block overall, placing it at the head of the next\n       * metadata header.\n       * - offset + 4 + 4 + blockSize does the same thing as the previous block with\n       * the exception of adding another 4 bytes to move it to the end of the new metadata\n       * header.\n       */\n\n      if (COMMENT_HEADERS.indexOf(blockHeader) !== -1) {\n        /* 4 is added to offset to move it to the head of the actual metadata.\n         * The range starting from offsetMatadata (the beginning of the block)\n         * and offsetMetadata + blockSize (the end of the block) is loaded.\n         */\n        var offsetMetadata = offset + 4;\n        mediaFileReader.loadRange([offsetMetadata, offsetMetadata + blockSize], {\n          onSuccess: function onSuccess() {\n            self._commentOffset = offsetMetadata;\n\n            self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\n          }\n        });\n      } else if (PICTURE_HEADERS.indexOf(blockHeader) !== -1) {\n        var offsetMetadata = offset + 4;\n        mediaFileReader.loadRange([offsetMetadata, offsetMetadata + blockSize], {\n          onSuccess: function onSuccess() {\n            self._pictureOffset = offsetMetadata;\n\n            self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\n          }\n        });\n      } else {\n        self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\n      }\n    }\n    /**\n     * Internal function used to load the next range and respective block.\n     *\n     * If the metadata block that was identified is not the last block before the\n     * audio blocks, the function will continue loading the next blocks. If it is\n     * the last block (identified by any values greater than 127, see FLAC spec.),\n     * the function will determine whether a comment block had been identified.\n     *\n     * If the block does not exist, the error callback is called. Otherwise, the function\n     * will call the success callback, allowing data parsing to begin.\n     * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\n     * @param {number} offset - The offset that the existing header was located at.\n     * @param {number} blockHeader - An integer reflecting the header type of the block.\n     * @param {number} blockSize - The size of the previously processed header.\n     * @param {LoadCallbackType} callbacks - The callback functions to be called.\n     */\n\n  }, {\n    key: \"_nextBlock\",\n    value: function _nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks) {\n      var self = this;\n\n      if (blockHeader > 127) {\n        if (!self._commentOffset) {\n          callbacks.onError({\n            \"type\": \"loadData\",\n            \"info\": \"Comment block could not be found.\"\n          });\n        } else {\n          callbacks.onSuccess();\n        }\n      } else {\n        mediaFileReader.loadRange([offset + 4 + blockSize, offset + 4 + 4 + blockSize], {\n          onSuccess: function onSuccess() {\n            self._loadBlock(mediaFileReader, offset + 4 + blockSize, callbacks);\n          }\n        });\n      }\n    }\n    /**\n     * Parses the data and returns the tags.\n     *\n     * This is an overview of the VorbisComment format and what this function attempts to\n     * retrieve:\n     * - First 4 bytes: a long that contains the length of the vendor string.\n     * - Next n bytes: the vendor string encoded in UTF-8.\n     * - Next 4 bytes: a long representing how many comments are in this block\n     * For each comment that exists:\n     * - First 4 bytes: a long representing the length of the comment\n     * - Next n bytes: the comment encoded in UTF-8.\n     * The comment string will usually appear in a format similar to:\n     * ARTIST=me\n     *\n     * Note that the longs and integers in this block are encoded in little endian\n     * as opposed to big endian for the rest of the FLAC spec.\n     * @param {MediaFileReader} data - The MediaFileReader to parse the file with.\n     * @param {Array<string>} [tags] - Optional tags to also be retrieved from the file.\n     * @return {TagType} - An object containing the tag information for the file.\n     */\n\n  }, {\n    key: \"_parseData\",\n    value: function _parseData(data, tags) {\n      var vendorLength = data.getLongAt(this._commentOffset, false);\n      var offsetVendor = this._commentOffset + 4;\n      /* This line is able to retrieve the vendor string that the VorbisComment block\n       * contains. However, it is not part of the tags that JSMediaTags normally retrieves,\n       * and is therefore commented out.\n       */\n      // var vendor = data.getStringWithCharsetAt(offsetVendor, vendorLength, \"utf-8\").toString();\n\n      var offsetList = vendorLength + offsetVendor;\n      /* To get the metadata from the block, we first get the long that contains the\n       * number of actual comment values that are existent within the block.\n       *\n       * As we loop through all of the comment blocks, we get the data length in order to\n       * get the right size string, and then determine which category that string falls under.\n       * The dataOffset variable is constantly updated so that it is at the beginning of the\n       * comment that is currently being parsed.\n       *\n       * Additions of 4 here are used to move the offset past the first 4 bytes which only contain\n       * the length of the comment.\n       */\n\n      var numComments = data.getLongAt(offsetList, false);\n      var dataOffset = offsetList + 4;\n      var title, artist, album, track, genre, picture;\n\n      for (var i = 0; i < numComments; i++) {\n        var _dataLength = data.getLongAt(dataOffset, false);\n\n        var s = data.getStringWithCharsetAt(dataOffset + 4, _dataLength, \"utf-8\").toString();\n        var d = s.indexOf(\"=\");\n        var split = [s.slice(0, d), s.slice(d + 1)];\n\n        switch (split[0].toUpperCase()) {\n          case \"TITLE\":\n            title = split[1];\n            break;\n\n          case \"ARTIST\":\n            artist = split[1];\n            break;\n\n          case \"ALBUM\":\n            album = split[1];\n            break;\n\n          case \"TRACKNUMBER\":\n            track = split[1];\n            break;\n\n          case \"GENRE\":\n            genre = split[1];\n            break;\n        }\n\n        dataOffset += 4 + _dataLength;\n      }\n      /* If a picture offset was found and assigned, then the reader will start processing\n       * the picture block from that point.\n       *\n       * All the lengths for the picture data can be found online here:\n       * https://xiph.org/flac/format.html#metadata_block_picture\n       */\n\n\n      if (this._pictureOffset) {\n        var imageType = data.getLongAt(this._pictureOffset, true);\n        var offsetMimeLength = this._pictureOffset + 4;\n        var mimeLength = data.getLongAt(offsetMimeLength, true);\n        var offsetMime = offsetMimeLength + 4;\n        var mime = data.getStringAt(offsetMime, mimeLength);\n        var offsetDescriptionLength = offsetMime + mimeLength;\n        var descriptionLength = data.getLongAt(offsetDescriptionLength, true);\n        var offsetDescription = offsetDescriptionLength + 4;\n        var description = data.getStringWithCharsetAt(offsetDescription, descriptionLength, \"utf-8\").toString();\n        var offsetDataLength = offsetDescription + descriptionLength + 16;\n        var dataLength = data.getLongAt(offsetDataLength, true);\n        var offsetData = offsetDataLength + 4;\n        var imageData = data.getBytesAt(offsetData, dataLength, true);\n        picture = {\n          format: mime,\n          type: IMAGE_TYPES[imageType],\n          description: description,\n          data: imageData\n        };\n      }\n\n      var tag = {\n        type: \"FLAC\",\n        version: \"1\",\n        tags: {\n          \"title\": title,\n          \"artist\": artist,\n          \"album\": album,\n          \"track\": track,\n          \"genre\": genre,\n          \"picture\": picture\n        }\n      };\n      return tag;\n    }\n  }], [{\n    key: \"getTagIdentifierByteRange\",\n    value:\n    /**\n     * Gets the byte range for the tag identifier.\n     *\n     * Because the Vorbis comment block is not guaranteed to be in a specified\n     * location, we can only load the first 4 bytes of the file to confirm it\n     * is a FLAC first.\n     *\n     * @return {ByteRange} The byte range that identifies the tag for a FLAC.\n     */\n    function getTagIdentifierByteRange() {\n      return {\n        offset: 0,\n        length: FLAC_HEADER_SIZE\n      };\n    }\n    /**\n     * Determines whether or not this reader can read a certain tag format.\n     *\n     * This checks that the first 4 characters in the file are fLaC, which\n     * according to the FLAC file specification should be the characters that\n     * indicate a FLAC file.\n     *\n     * @return {boolean} True if the header is fLaC, false otherwise.\n     */\n\n  }, {\n    key: \"canReadTagFormat\",\n    value: function canReadTagFormat(tagIdentifier) {\n      var id = String.fromCharCode.apply(String, tagIdentifier.slice(0, 4));\n      return id === 'fLaC';\n    }\n  }]);\n\n  return FLACTagReader;\n}(MediaTagReader);\n\nmodule.exports = FLACTagReader;"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,OAAOA,CAACC,GAAG,EAAE;EAAE,yBAAyB;;EAAE,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAEH,OAAO,GAAG,SAASA,OAAOA,CAACC,GAAG,EAAE;MAAE,OAAO,OAAOA,GAAG;IAAE,CAAC;EAAE,CAAC,MAAM;IAAED,OAAO,GAAG,SAASA,OAAOA,CAACC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;IAAE,CAAC;EAAE;EAAE,OAAOD,OAAO,CAACC,GAAG,CAAC;AAAE;AAEzX,SAASK,eAAeA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAC,CAAC;IAAEE,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;IAAED,UAAU,CAACE,YAAY,GAAG,IAAI;IAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;IAAEC,MAAM,CAACC,cAAc,CAACT,MAAM,EAAEI,UAAU,CAACM,GAAG,EAAEN,UAAU,CAAC;EAAE;AAAE;AAE5T,SAASO,YAAYA,CAACd,WAAW,EAAEe,UAAU,EAAEC,WAAW,EAAE;EAAE,IAAID,UAAU,EAAEb,iBAAiB,CAACF,WAAW,CAACH,SAAS,EAAEkB,UAAU,CAAC;EAAE,IAAIC,WAAW,EAAEd,iBAAiB,CAACF,WAAW,EAAEgB,WAAW,CAAC;EAAE,OAAOhB,WAAW;AAAE;AAEtN,SAASiB,SAASA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAAE,IAAI,OAAOA,UAAU,KAAK,UAAU,IAAIA,UAAU,KAAK,IAAI,EAAE;IAAE,MAAM,IAAIlB,SAAS,CAAC,oDAAoD,CAAC;EAAE;EAAEiB,QAAQ,CAACrB,SAAS,GAAGc,MAAM,CAACS,MAAM,CAACD,UAAU,IAAIA,UAAU,CAACtB,SAAS,EAAE;IAAED,WAAW,EAAE;MAAEyB,KAAK,EAAEH,QAAQ;MAAER,QAAQ,EAAE,IAAI;MAAED,YAAY,EAAE;IAAK;EAAE,CAAC,CAAC;EAAE,IAAIU,UAAU,EAAEG,eAAe,CAACJ,QAAQ,EAAEC,UAAU,CAAC;AAAE;AAEhY,SAASG,eAAeA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAAEF,eAAe,GAAGX,MAAM,CAACc,cAAc,IAAI,SAASH,eAAeA,CAACC,CAAC,EAAEC,CAAC,EAAE;IAAED,CAAC,CAACG,SAAS,GAAGF,CAAC;IAAE,OAAOD,CAAC;EAAE,CAAC;EAAE,OAAOD,eAAe,CAACC,CAAC,EAAEC,CAAC,CAAC;AAAE;AAEzK,SAASG,YAAYA,CAACC,OAAO,EAAE;EAAE,IAAIC,yBAAyB,GAAGC,yBAAyB,CAAC,CAAC;EAAE,OAAO,SAASC,oBAAoBA,CAAA,EAAG;IAAE,IAAIC,KAAK,GAAGC,eAAe,CAACL,OAAO,CAAC;MAAEM,MAAM;IAAE,IAAIL,yBAAyB,EAAE;MAAE,IAAIM,SAAS,GAAGF,eAAe,CAAC,IAAI,CAAC,CAACrC,WAAW;MAAEsC,MAAM,GAAGE,OAAO,CAACC,SAAS,CAACL,KAAK,EAAEM,SAAS,EAAEH,SAAS,CAAC;IAAE,CAAC,MAAM;MAAED,MAAM,GAAGF,KAAK,CAACO,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;IAAE;IAAE,OAAOE,0BAA0B,CAAC,IAAI,EAAEN,MAAM,CAAC;EAAE,CAAC;AAAE;AAExa,SAASM,0BAA0BA,CAACC,IAAI,EAAEC,IAAI,EAAE;EAAE,IAAIA,IAAI,KAAKlD,OAAO,CAACkD,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,UAAU,CAAC,EAAE;IAAE,OAAOA,IAAI;EAAE;EAAE,OAAOC,sBAAsB,CAACF,IAAI,CAAC;AAAE;AAEhL,SAASE,sBAAsBA,CAACF,IAAI,EAAE;EAAE,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAE,MAAM,IAAIG,cAAc,CAAC,2DAA2D,CAAC;EAAE;EAAE,OAAOH,IAAI;AAAE;AAErK,SAASX,yBAAyBA,CAAA,EAAG;EAAE,IAAI,OAAOM,OAAO,KAAK,WAAW,IAAI,CAACA,OAAO,CAACC,SAAS,EAAE,OAAO,KAAK;EAAE,IAAID,OAAO,CAACC,SAAS,CAACQ,IAAI,EAAE,OAAO,KAAK;EAAE,IAAI,OAAOC,KAAK,KAAK,UAAU,EAAE,OAAO,IAAI;EAAE,IAAI;IAAEC,OAAO,CAAClD,SAAS,CAACmD,OAAO,CAACN,IAAI,CAACN,OAAO,CAACC,SAAS,CAACU,OAAO,EAAE,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;IAAE,OAAO,IAAI;EAAE,CAAC,CAAC,OAAOE,CAAC,EAAE;IAAE,OAAO,KAAK;EAAE;AAAE;AAExU,SAAShB,eAAeA,CAACV,CAAC,EAAE;EAAEU,eAAe,GAAGtB,MAAM,CAACc,cAAc,GAAGd,MAAM,CAACuC,cAAc,GAAG,SAASjB,eAAeA,CAACV,CAAC,EAAE;IAAE,OAAOA,CAAC,CAACG,SAAS,IAAIf,MAAM,CAACuC,cAAc,CAAC3B,CAAC,CAAC;EAAE,CAAC;EAAE,OAAOU,eAAe,CAACV,CAAC,CAAC;AAAE;AAE5M,SAAS4B,eAAeA,CAAC1D,GAAG,EAAEoB,GAAG,EAAEQ,KAAK,EAAE;EAAE,IAAIR,GAAG,IAAIpB,GAAG,EAAE;IAAEkB,MAAM,CAACC,cAAc,CAACnB,GAAG,EAAEoB,GAAG,EAAE;MAAEQ,KAAK,EAAEA,KAAK;MAAEb,UAAU,EAAE,IAAI;MAAEC,YAAY,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;EAAE,CAAC,MAAM;IAAEjB,GAAG,CAACoB,GAAG,CAAC,GAAGQ,KAAK;EAAE;EAAE,OAAO5B,GAAG;AAAE;AAEhN,IAAI2D,cAAc,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAChD;AACA;AACA;;AAGA,IAAIC,gBAAgB,GAAG,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC;AAC9B,IAAIC,eAAe,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;AAEhC,IAAIC,WAAW,GAAG,CAAC,OAAO,EAAE,qCAAqC,EAAE,iBAAiB,EAAE,eAAe,EAAE,cAAc,EAAE,cAAc,EAAE,+BAA+B,EAAE,oCAAoC,EAAE,kBAAkB,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,4BAA4B,EAAE,wBAAwB,EAAE,cAAc,EAAE,sBAAsB,EAAE,2BAA2B,CAAC;;AAEje;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAa,UAAUC,eAAe,EAAE;EAC1D1C,SAAS,CAACyC,aAAa,EAAEC,eAAe,CAAC;EAEzC,IAAIC,MAAM,GAAGjC,YAAY,CAAC+B,aAAa,CAAC;EAExC,SAASA,aAAaA,CAAA,EAAG;IACvB,IAAIG,KAAK;IAET/D,eAAe,CAAC,IAAI,EAAE4D,aAAa,CAAC;IAEpC,KAAK,IAAII,IAAI,GAAGxB,SAAS,CAAChC,MAAM,EAAEyD,IAAI,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC,EAAEG,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGH,IAAI,EAAEG,IAAI,EAAE,EAAE;MACvFF,IAAI,CAACE,IAAI,CAAC,GAAG3B,SAAS,CAAC2B,IAAI,CAAC;IAC9B;IAEAJ,KAAK,GAAGD,MAAM,CAAClB,IAAI,CAACH,KAAK,CAACqB,MAAM,EAAE,CAAC,IAAI,CAAC,CAACM,MAAM,CAACH,IAAI,CAAC,CAAC;IAEtDZ,eAAe,CAACR,sBAAsB,CAACkB,KAAK,CAAC,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAExEV,eAAe,CAACR,sBAAsB,CAACkB,KAAK,CAAC,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAExE,OAAOA,KAAK;EACd;EAEA/C,YAAY,CAAC4C,aAAa,EAAE,CAAC;IAC3B7C,GAAG,EAAE,WAAW;IAChBQ,KAAK;IACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,SAAS8C,SAASA,CAACC,eAAe,EAAEC,SAAS,EAAE;MAC7C,IAAI5B,IAAI,GAAG,IAAI;MACf2B,eAAe,CAACE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QAChCC,SAAS,EAAE,SAASA,SAASA,CAAA,EAAG;UAC9B9B,IAAI,CAAC+B,UAAU,CAACJ,eAAe,EAAE,CAAC,EAAEC,SAAS,CAAC;QAChD;MACF,CAAC,CAAC;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDxD,GAAG,EAAE,YAAY;IACjBQ,KAAK,EAAE,SAASmD,UAAUA,CAACJ,eAAe,EAAEK,MAAM,EAAEJ,SAAS,EAAE;MAC7D,IAAI5B,IAAI,GAAG,IAAI;MACf;AACN;AACA;;MAEM,IAAIiC,WAAW,GAAGN,eAAe,CAACO,SAAS,CAACF,MAAM,CAAC;MACnD;AACN;AACA;AACA;;MAEM,IAAIG,SAAS,GAAGR,eAAe,CAACS,cAAc,CAACJ,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC;MAChE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM,IAAIlB,eAAe,CAACuB,OAAO,CAACJ,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/C;AACR;AACA;AACA;QACQ,IAAIK,cAAc,GAAGN,MAAM,GAAG,CAAC;QAC/BL,eAAe,CAACE,SAAS,CAAC,CAACS,cAAc,EAAEA,cAAc,GAAGH,SAAS,CAAC,EAAE;UACtEL,SAAS,EAAE,SAASA,SAASA,CAAA,EAAG;YAC9B9B,IAAI,CAACuC,cAAc,GAAGD,cAAc;YAEpCtC,IAAI,CAACwC,UAAU,CAACb,eAAe,EAAEK,MAAM,EAAEC,WAAW,EAAEE,SAAS,EAAEP,SAAS,CAAC;UAC7E;QACF,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIb,eAAe,CAACsB,OAAO,CAACJ,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;QACtD,IAAIK,cAAc,GAAGN,MAAM,GAAG,CAAC;QAC/BL,eAAe,CAACE,SAAS,CAAC,CAACS,cAAc,EAAEA,cAAc,GAAGH,SAAS,CAAC,EAAE;UACtEL,SAAS,EAAE,SAASA,SAASA,CAAA,EAAG;YAC9B9B,IAAI,CAACyC,cAAc,GAAGH,cAAc;YAEpCtC,IAAI,CAACwC,UAAU,CAACb,eAAe,EAAEK,MAAM,EAAEC,WAAW,EAAEE,SAAS,EAAEP,SAAS,CAAC;UAC7E;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL5B,IAAI,CAACwC,UAAU,CAACb,eAAe,EAAEK,MAAM,EAAEC,WAAW,EAAEE,SAAS,EAAEP,SAAS,CAAC;MAC7E;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDxD,GAAG,EAAE,YAAY;IACjBQ,KAAK,EAAE,SAAS4D,UAAUA,CAACb,eAAe,EAAEK,MAAM,EAAEC,WAAW,EAAEE,SAAS,EAAEP,SAAS,EAAE;MACrF,IAAI5B,IAAI,GAAG,IAAI;MAEf,IAAIiC,WAAW,GAAG,GAAG,EAAE;QACrB,IAAI,CAACjC,IAAI,CAACuC,cAAc,EAAE;UACxBX,SAAS,CAACc,OAAO,CAAC;YAChB,MAAM,EAAE,UAAU;YAClB,MAAM,EAAE;UACV,CAAC,CAAC;QACJ,CAAC,MAAM;UACLd,SAAS,CAACE,SAAS,CAAC,CAAC;QACvB;MACF,CAAC,MAAM;QACLH,eAAe,CAACE,SAAS,CAAC,CAACG,MAAM,GAAG,CAAC,GAAGG,SAAS,EAAEH,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGG,SAAS,CAAC,EAAE;UAC9EL,SAAS,EAAE,SAASA,SAASA,CAAA,EAAG;YAC9B9B,IAAI,CAAC+B,UAAU,CAACJ,eAAe,EAAEK,MAAM,GAAG,CAAC,GAAGG,SAAS,EAAEP,SAAS,CAAC;UACrE;QACF,CAAC,CAAC;MACJ;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDxD,GAAG,EAAE,YAAY;IACjBQ,KAAK,EAAE,SAAS+D,UAAUA,CAACC,IAAI,EAAEC,IAAI,EAAE;MACrC,IAAIC,YAAY,GAAGF,IAAI,CAACG,SAAS,CAAC,IAAI,CAACR,cAAc,EAAE,KAAK,CAAC;MAC7D,IAAIS,YAAY,GAAG,IAAI,CAACT,cAAc,GAAG,CAAC;MAC1C;AACN;AACA;AACA;MACM;;MAEA,IAAIU,UAAU,GAAGH,YAAY,GAAGE,YAAY;MAC5C;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAEM,IAAIE,WAAW,GAAGN,IAAI,CAACG,SAAS,CAACE,UAAU,EAAE,KAAK,CAAC;MACnD,IAAIE,UAAU,GAAGF,UAAU,GAAG,CAAC;MAC/B,IAAIG,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO;MAE/C,KAAK,IAAI7F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsF,WAAW,EAAEtF,CAAC,EAAE,EAAE;QACpC,IAAI8F,WAAW,GAAGd,IAAI,CAACG,SAAS,CAACI,UAAU,EAAE,KAAK,CAAC;QAEnD,IAAIQ,CAAC,GAAGf,IAAI,CAACgB,sBAAsB,CAACT,UAAU,GAAG,CAAC,EAAEO,WAAW,EAAE,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC;QACpF,IAAIC,CAAC,GAAGH,CAAC,CAACtB,OAAO,CAAC,GAAG,CAAC;QACtB,IAAI0B,KAAK,GAAG,CAACJ,CAAC,CAACK,KAAK,CAAC,CAAC,EAAEF,CAAC,CAAC,EAAEH,CAAC,CAACK,KAAK,CAACF,CAAC,GAAG,CAAC,CAAC,CAAC;QAE3C,QAAQC,KAAK,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;UAC5B,KAAK,OAAO;YACVb,KAAK,GAAGW,KAAK,CAAC,CAAC,CAAC;YAChB;UAEF,KAAK,QAAQ;YACXV,MAAM,GAAGU,KAAK,CAAC,CAAC,CAAC;YACjB;UAEF,KAAK,OAAO;YACVT,KAAK,GAAGS,KAAK,CAAC,CAAC,CAAC;YAChB;UAEF,KAAK,aAAa;YAChBR,KAAK,GAAGQ,KAAK,CAAC,CAAC,CAAC;YAChB;UAEF,KAAK,OAAO;YACVP,KAAK,GAAGO,KAAK,CAAC,CAAC,CAAC;YAChB;QACJ;QAEAZ,UAAU,IAAI,CAAC,GAAGO,WAAW;MAC/B;MACA;AACN;AACA;AACA;AACA;AACA;;MAGM,IAAI,IAAI,CAACjB,cAAc,EAAE;QACvB,IAAIyB,SAAS,GAAGtB,IAAI,CAACG,SAAS,CAAC,IAAI,CAACN,cAAc,EAAE,IAAI,CAAC;QACzD,IAAI0B,gBAAgB,GAAG,IAAI,CAAC1B,cAAc,GAAG,CAAC;QAC9C,IAAI2B,UAAU,GAAGxB,IAAI,CAACG,SAAS,CAACoB,gBAAgB,EAAE,IAAI,CAAC;QACvD,IAAIE,UAAU,GAAGF,gBAAgB,GAAG,CAAC;QACrC,IAAIG,IAAI,GAAG1B,IAAI,CAAC2B,WAAW,CAACF,UAAU,EAAED,UAAU,CAAC;QACnD,IAAII,uBAAuB,GAAGH,UAAU,GAAGD,UAAU;QACrD,IAAIK,iBAAiB,GAAG7B,IAAI,CAACG,SAAS,CAACyB,uBAAuB,EAAE,IAAI,CAAC;QACrE,IAAIE,iBAAiB,GAAGF,uBAAuB,GAAG,CAAC;QACnD,IAAIG,WAAW,GAAG/B,IAAI,CAACgB,sBAAsB,CAACc,iBAAiB,EAAED,iBAAiB,EAAE,OAAO,CAAC,CAACZ,QAAQ,CAAC,CAAC;QACvG,IAAIe,gBAAgB,GAAGF,iBAAiB,GAAGD,iBAAiB,GAAG,EAAE;QACjE,IAAII,UAAU,GAAGjC,IAAI,CAACG,SAAS,CAAC6B,gBAAgB,EAAE,IAAI,CAAC;QACvD,IAAIE,UAAU,GAAGF,gBAAgB,GAAG,CAAC;QACrC,IAAIG,SAAS,GAAGnC,IAAI,CAACoC,UAAU,CAACF,UAAU,EAAED,UAAU,EAAE,IAAI,CAAC;QAC7DpB,OAAO,GAAG;UACRwB,MAAM,EAAEX,IAAI;UACZY,IAAI,EAAElE,WAAW,CAACkD,SAAS,CAAC;UAC5BS,WAAW,EAAEA,WAAW;UACxB/B,IAAI,EAAEmC;QACR,CAAC;MACH;MAEA,IAAII,GAAG,GAAG;QACRD,IAAI,EAAE,MAAM;QACZE,OAAO,EAAE,GAAG;QACZvC,IAAI,EAAE;UACJ,OAAO,EAAEO,KAAK;UACd,QAAQ,EAAEC,MAAM;UAChB,OAAO,EAAEC,KAAK;UACd,OAAO,EAAEC,KAAK;UACd,OAAO,EAAEC,KAAK;UACd,SAAS,EAAEC;QACb;MACF,CAAC;MACD,OAAO0B,GAAG;IACZ;EACF,CAAC,CAAC,EAAE,CAAC;IACH/G,GAAG,EAAE,2BAA2B;IAChCQ,KAAK;IACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,SAASyG,yBAAyBA,CAAA,EAAG;MACnC,OAAO;QACLrD,MAAM,EAAE,CAAC;QACTnE,MAAM,EAAEgD;MACV,CAAC;IACH;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDzC,GAAG,EAAE,kBAAkB;IACvBQ,KAAK,EAAE,SAAS0G,gBAAgBA,CAACC,aAAa,EAAE;MAC9C,IAAIC,EAAE,GAAGC,MAAM,CAACC,YAAY,CAAC5F,KAAK,CAAC2F,MAAM,EAAEF,aAAa,CAACvB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACrE,OAAOwB,EAAE,KAAK,MAAM;IACtB;EACF,CAAC,CAAC,CAAC;EAEH,OAAOvE,aAAa;AACtB,CAAC,CAACN,cAAc,CAAC;AAEjBgF,MAAM,CAACC,OAAO,GAAG3E,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}