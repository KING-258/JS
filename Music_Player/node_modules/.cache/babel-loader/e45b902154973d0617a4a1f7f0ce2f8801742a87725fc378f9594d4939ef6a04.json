{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar MediaFileReader = require('./MediaFileReader');\nvar StringUtils = require('./StringUtils');\nvar ArrayFileReader = require('./ArrayFileReader');\nvar FRAME_DESCRIPTIONS = {\n  // v2.2\n  \"BUF\": \"Recommended buffer size\",\n  \"CNT\": \"Play counter\",\n  \"COM\": \"Comments\",\n  \"CRA\": \"Audio encryption\",\n  \"CRM\": \"Encrypted meta frame\",\n  \"ETC\": \"Event timing codes\",\n  \"EQU\": \"Equalization\",\n  \"GEO\": \"General encapsulated object\",\n  \"IPL\": \"Involved people list\",\n  \"LNK\": \"Linked information\",\n  \"MCI\": \"Music CD Identifier\",\n  \"MLL\": \"MPEG location lookup table\",\n  \"PIC\": \"Attached picture\",\n  \"POP\": \"Popularimeter\",\n  \"REV\": \"Reverb\",\n  \"RVA\": \"Relative volume adjustment\",\n  \"SLT\": \"Synchronized lyric/text\",\n  \"STC\": \"Synced tempo codes\",\n  \"TAL\": \"Album/Movie/Show title\",\n  \"TBP\": \"BPM (Beats Per Minute)\",\n  \"TCM\": \"Composer\",\n  \"TCO\": \"Content type\",\n  \"TCR\": \"Copyright message\",\n  \"TDA\": \"Date\",\n  \"TDY\": \"Playlist delay\",\n  \"TEN\": \"Encoded by\",\n  \"TFT\": \"File type\",\n  \"TIM\": \"Time\",\n  \"TKE\": \"Initial key\",\n  \"TLA\": \"Language(s)\",\n  \"TLE\": \"Length\",\n  \"TMT\": \"Media type\",\n  \"TOA\": \"Original artist(s)/performer(s)\",\n  \"TOF\": \"Original filename\",\n  \"TOL\": \"Original Lyricist(s)/text writer(s)\",\n  \"TOR\": \"Original release year\",\n  \"TOT\": \"Original album/Movie/Show title\",\n  \"TP1\": \"Lead artist(s)/Lead performer(s)/Soloist(s)/Performing group\",\n  \"TP2\": \"Band/Orchestra/Accompaniment\",\n  \"TP3\": \"Conductor/Performer refinement\",\n  \"TP4\": \"Interpreted, remixed, or otherwise modified by\",\n  \"TPA\": \"Part of a set\",\n  \"TPB\": \"Publisher\",\n  \"TRC\": \"ISRC (International Standard Recording Code)\",\n  \"TRD\": \"Recording dates\",\n  \"TRK\": \"Track number/Position in set\",\n  \"TSI\": \"Size\",\n  \"TSS\": \"Software/hardware and settings used for encoding\",\n  \"TT1\": \"Content group description\",\n  \"TT2\": \"Title/Songname/Content description\",\n  \"TT3\": \"Subtitle/Description refinement\",\n  \"TXT\": \"Lyricist/text writer\",\n  \"TXX\": \"User defined text information frame\",\n  \"TYE\": \"Year\",\n  \"UFI\": \"Unique file identifier\",\n  \"ULT\": \"Unsychronized lyric/text transcription\",\n  \"WAF\": \"Official audio file webpage\",\n  \"WAR\": \"Official artist/performer webpage\",\n  \"WAS\": \"Official audio source webpage\",\n  \"WCM\": \"Commercial information\",\n  \"WCP\": \"Copyright/Legal information\",\n  \"WPB\": \"Publishers official webpage\",\n  \"WXX\": \"User defined URL link frame\",\n  // v2.3\n  \"AENC\": \"Audio encryption\",\n  \"APIC\": \"Attached picture\",\n  \"ASPI\": \"Audio seek point index\",\n  \"CHAP\": \"Chapter\",\n  \"CTOC\": \"Table of contents\",\n  \"COMM\": \"Comments\",\n  \"COMR\": \"Commercial frame\",\n  \"ENCR\": \"Encryption method registration\",\n  \"EQU2\": \"Equalisation (2)\",\n  \"EQUA\": \"Equalization\",\n  \"ETCO\": \"Event timing codes\",\n  \"GEOB\": \"General encapsulated object\",\n  \"GRID\": \"Group identification registration\",\n  \"IPLS\": \"Involved people list\",\n  \"LINK\": \"Linked information\",\n  \"MCDI\": \"Music CD identifier\",\n  \"MLLT\": \"MPEG location lookup table\",\n  \"OWNE\": \"Ownership frame\",\n  \"PRIV\": \"Private frame\",\n  \"PCNT\": \"Play counter\",\n  \"POPM\": \"Popularimeter\",\n  \"POSS\": \"Position synchronisation frame\",\n  \"RBUF\": \"Recommended buffer size\",\n  \"RVA2\": \"Relative volume adjustment (2)\",\n  \"RVAD\": \"Relative volume adjustment\",\n  \"RVRB\": \"Reverb\",\n  \"SEEK\": \"Seek frame\",\n  \"SYLT\": \"Synchronized lyric/text\",\n  \"SYTC\": \"Synchronized tempo codes\",\n  \"TALB\": \"Album/Movie/Show title\",\n  \"TBPM\": \"BPM (beats per minute)\",\n  \"TCOM\": \"Composer\",\n  \"TCON\": \"Content type\",\n  \"TCOP\": \"Copyright message\",\n  \"TDAT\": \"Date\",\n  \"TDLY\": \"Playlist delay\",\n  \"TDRC\": \"Recording time\",\n  \"TDRL\": \"Release time\",\n  \"TDTG\": \"Tagging time\",\n  \"TENC\": \"Encoded by\",\n  \"TEXT\": \"Lyricist/Text writer\",\n  \"TFLT\": \"File type\",\n  \"TIME\": \"Time\",\n  \"TIPL\": \"Involved people list\",\n  \"TIT1\": \"Content group description\",\n  \"TIT2\": \"Title/songname/content description\",\n  \"TIT3\": \"Subtitle/Description refinement\",\n  \"TKEY\": \"Initial key\",\n  \"TLAN\": \"Language(s)\",\n  \"TLEN\": \"Length\",\n  \"TMCL\": \"Musician credits list\",\n  \"TMED\": \"Media type\",\n  \"TMOO\": \"Mood\",\n  \"TOAL\": \"Original album/movie/show title\",\n  \"TOFN\": \"Original filename\",\n  \"TOLY\": \"Original lyricist(s)/text writer(s)\",\n  \"TOPE\": \"Original artist(s)/performer(s)\",\n  \"TORY\": \"Original release year\",\n  \"TOWN\": \"File owner/licensee\",\n  \"TPE1\": \"Lead performer(s)/Soloist(s)\",\n  \"TPE2\": \"Band/orchestra/accompaniment\",\n  \"TPE3\": \"Conductor/performer refinement\",\n  \"TPE4\": \"Interpreted, remixed, or otherwise modified by\",\n  \"TPOS\": \"Part of a set\",\n  \"TPRO\": \"Produced notice\",\n  \"TPUB\": \"Publisher\",\n  \"TRCK\": \"Track number/Position in set\",\n  \"TRDA\": \"Recording dates\",\n  \"TRSN\": \"Internet radio station name\",\n  \"TRSO\": \"Internet radio station owner\",\n  \"TSOA\": \"Album sort order\",\n  \"TSOP\": \"Performer sort order\",\n  \"TSOT\": \"Title sort order\",\n  \"TSIZ\": \"Size\",\n  \"TSRC\": \"ISRC (international standard recording code)\",\n  \"TSSE\": \"Software/Hardware and settings used for encoding\",\n  \"TSST\": \"Set subtitle\",\n  \"TYER\": \"Year\",\n  \"TXXX\": \"User defined text information frame\",\n  \"UFID\": \"Unique file identifier\",\n  \"USER\": \"Terms of use\",\n  \"USLT\": \"Unsychronized lyric/text transcription\",\n  \"WCOM\": \"Commercial information\",\n  \"WCOP\": \"Copyright/Legal information\",\n  \"WOAF\": \"Official audio file webpage\",\n  \"WOAR\": \"Official artist/performer webpage\",\n  \"WOAS\": \"Official audio source webpage\",\n  \"WORS\": \"Official internet radio station homepage\",\n  \"WPAY\": \"Payment\",\n  \"WPUB\": \"Publishers official webpage\",\n  \"WXXX\": \"User defined URL link frame\"\n};\nvar ID3v2FrameReader = /*#__PURE__*/function () {\n  function ID3v2FrameReader() {\n    _classCallCheck(this, ID3v2FrameReader);\n  }\n  _createClass(ID3v2FrameReader, null, [{\n    key: \"getFrameReaderFunction\",\n    value: function getFrameReaderFunction(frameId) {\n      if (frameId in frameReaderFunctions) {\n        return frameReaderFunctions[frameId];\n      } else if (frameId[0] === \"T\") {\n        // All frame ids starting with T are text tags.\n        return frameReaderFunctions[\"T*\"];\n      } else if (frameId[0] === \"W\") {\n        // All frame ids starting with W are url tags.\n        return frameReaderFunctions[\"W*\"];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * All the frames consists of a frame header followed by one or more fields\n     * containing the actual information.\n     * The frame ID made out of the characters capital A-Z and 0-9. Identifiers\n     * beginning with \"X\", \"Y\" and \"Z\" are for experimental use and free for\n     * everyone to use, without the need to set the experimental bit in the tag\n     * header. Have in mind that someone else might have used the same identifier\n     * as you. All other identifiers are either used or reserved for future use.\n     * The frame ID is followed by a size descriptor, making a total header size\n     * of ten bytes in every frame. The size is calculated as frame size excluding\n     * frame header (frame size - 10).\n     */\n  }, {\n    key: \"readFrames\",\n    value: function readFrames(offset, end, data, id3header, tags) {\n      var frames = {};\n      var frameHeaderSize = this._getFrameHeaderSize(id3header); // console.log('header', id3header);\n\n      while (\n      // we should be able to read at least the frame header\n      offset < end - frameHeaderSize) {\n        var header = this._readFrameHeader(data, offset, id3header);\n        var frameId = header.id; // No frame ID sometimes means it's the last frame (GTFO).\n\n        if (!frameId) {\n          break;\n        }\n        var flags = header.flags;\n        var frameSize = header.size;\n        var frameDataOffset = offset + header.headerSize;\n        var frameData = data; // console.log(offset, frameId, header.size + header.headerSize, flags && flags.format.unsynchronisation);\n        // advance data offset to the next frame data\n\n        offset += header.headerSize + header.size; // skip unwanted tags\n\n        if (tags && tags.indexOf(frameId) === -1) {\n          continue;\n        } // Workaround: MP3ext V3.3.17 places a non-compliant padding string at\n        // the end of the ID3v2 header. A string like \"MP3ext V3.3.19(ansi)\"\n        // is added multiple times at the end of the ID3 tag. More information\n        // about this issue can be found at\n        // https://github.com/aadsm/jsmediatags/issues/58#issuecomment-313865336\n\n        if (frameId === 'MP3e' || frameId === '\\x00MP3' || frameId === '\\x00\\x00MP' || frameId === ' MP3') {\n          break;\n        }\n        var unsyncData;\n        if (flags && flags.format.unsynchronisation && !id3header.flags.unsynchronisation) {\n          frameData = this.getUnsyncFileReader(frameData, frameDataOffset, frameSize);\n          frameDataOffset = 0;\n          frameSize = frameData.getSize();\n        } // the first 4 bytes are the real data size\n        // (after unsynchronisation && encryption)\n\n        if (flags && flags.format.data_length_indicator) {\n          // var frameDataSize = frameData.getSynchsafeInteger32At(frameDataOffset);\n          frameDataOffset += 4;\n          frameSize -= 4;\n        }\n        var readFrameFunc = ID3v2FrameReader.getFrameReaderFunction(frameId);\n        var parsedData = readFrameFunc ? readFrameFunc.apply(this, [frameDataOffset, frameSize, frameData, flags, id3header]) : null;\n        var desc = this._getFrameDescription(frameId);\n        var frame = {\n          id: frameId,\n          size: frameSize,\n          description: desc,\n          data: parsedData\n        };\n        if (frameId in frames) {\n          if (frames[frameId].id) {\n            frames[frameId] = [frames[frameId]];\n          }\n          frames[frameId].push(frame);\n        } else {\n          frames[frameId] = frame;\n        }\n      }\n      return frames;\n    }\n  }, {\n    key: \"_getFrameHeaderSize\",\n    value: function _getFrameHeaderSize(id3header) {\n      var major = id3header.major;\n      if (major == 2) {\n        return 6;\n      } else if (major == 3 || major == 4) {\n        return 10;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_readFrameHeader\",\n    value: function _readFrameHeader(data, offset, id3header) {\n      var major = id3header.major;\n      var flags = null;\n      var frameHeaderSize = this._getFrameHeaderSize(id3header);\n      switch (major) {\n        case 2:\n          var frameId = data.getStringAt(offset, 3);\n          var frameSize = data.getInteger24At(offset + 3, true);\n          break;\n        case 3:\n          var frameId = data.getStringAt(offset, 4);\n          var frameSize = data.getLongAt(offset + 4, true);\n          break;\n        case 4:\n          var frameId = data.getStringAt(offset, 4);\n          var frameSize = data.getSynchsafeInteger32At(offset + 4);\n          break;\n      }\n      if (frameId == String.fromCharCode(0, 0, 0) || frameId == String.fromCharCode(0, 0, 0, 0)) {\n        frameId = \"\";\n      } // if frameId is empty then it's the last frame\n\n      if (frameId) {\n        // read frame message and format flags\n        if (major > 2) {\n          flags = this._readFrameFlags(data, offset + 8);\n        }\n      }\n      return {\n        \"id\": frameId || \"\",\n        \"size\": frameSize || 0,\n        \"headerSize\": frameHeaderSize || 0,\n        \"flags\": flags\n      };\n    }\n  }, {\n    key: \"_readFrameFlags\",\n    value: function _readFrameFlags(data, offset) {\n      return {\n        message: {\n          tag_alter_preservation: data.isBitSetAt(offset, 6),\n          file_alter_preservation: data.isBitSetAt(offset, 5),\n          read_only: data.isBitSetAt(offset, 4)\n        },\n        format: {\n          grouping_identity: data.isBitSetAt(offset + 1, 7),\n          compression: data.isBitSetAt(offset + 1, 3),\n          encryption: data.isBitSetAt(offset + 1, 2),\n          unsynchronisation: data.isBitSetAt(offset + 1, 1),\n          data_length_indicator: data.isBitSetAt(offset + 1, 0)\n        }\n      };\n    }\n  }, {\n    key: \"_getFrameDescription\",\n    value: function _getFrameDescription(frameId) {\n      if (frameId in FRAME_DESCRIPTIONS) {\n        return FRAME_DESCRIPTIONS[frameId];\n      } else {\n        return 'Unknown';\n      }\n    }\n  }, {\n    key: \"getUnsyncFileReader\",\n    value: function getUnsyncFileReader(data, offset, size) {\n      var frameData = data.getBytesAt(offset, size);\n      for (var i = 0; i < frameData.length - 1; i++) {\n        if (frameData[i] === 0xff && frameData[i + 1] === 0x00) {\n          frameData.splice(i + 1, 1);\n        }\n      }\n      return new ArrayFileReader(frameData);\n    }\n  }]);\n  return ID3v2FrameReader;\n}();\n;\nvar frameReaderFunctions = {};\nframeReaderFunctions['APIC'] = function readPictureFrame(offset, length, data, flags, id3header) {\n  var start = offset;\n  var charset = getTextEncoding(data.getByteAt(offset));\n  switch (id3header && id3header.major) {\n    case 2:\n      var format = data.getStringAt(offset + 1, 3);\n      offset += 4;\n      break;\n    case 3:\n    case 4:\n      var format = data.getStringWithCharsetAt(offset + 1, length - 1);\n      offset += 1 + format.bytesReadCount;\n      break;\n    default:\n      throw new Error(\"Couldn't read ID3v2 major version.\");\n  }\n  var bite = data.getByteAt(offset);\n  var type = PICTURE_TYPE[bite];\n  var desc = data.getStringWithCharsetAt(offset + 1, length - (offset - start) - 1, charset);\n  offset += 1 + desc.bytesReadCount;\n  return {\n    \"format\": format.toString(),\n    \"type\": type,\n    \"description\": desc.toString(),\n    \"data\": data.getBytesAt(offset, start + length - offset)\n  };\n}; // ID3v2 chapters according to http://id3.org/id3v2-chapters-1.0\n\nframeReaderFunctions['CHAP'] = function readChapterFrame(offset, length, data, flags, id3header) {\n  var originalOffset = offset;\n  var result = {};\n  var id = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\n  result.id = id.toString();\n  offset += id.bytesReadCount;\n  result.startTime = data.getLongAt(offset, true);\n  offset += 4;\n  result.endTime = data.getLongAt(offset, true);\n  offset += 4;\n  result.startOffset = data.getLongAt(offset, true);\n  offset += 4;\n  result.endOffset = data.getLongAt(offset, true);\n  offset += 4;\n  var remainingLength = length - (offset - originalOffset);\n  result.subFrames = this.readFrames(offset, offset + remainingLength, data, id3header);\n  return result;\n}; // ID3v2 table of contents according to http://id3.org/id3v2-chapters-1.0\n\nframeReaderFunctions['CTOC'] = function readTableOfContentsFrame(offset, length, data, flags, id3header) {\n  var originalOffset = offset;\n  var result = {\n    childElementIds: [],\n    id: undefined,\n    topLevel: undefined,\n    ordered: undefined,\n    entryCount: undefined,\n    subFrames: undefined\n  };\n  var id = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\n  result.id = id.toString();\n  offset += id.bytesReadCount;\n  result.topLevel = data.isBitSetAt(offset, 1);\n  result.ordered = data.isBitSetAt(offset, 0);\n  offset++;\n  result.entryCount = data.getByteAt(offset);\n  offset++;\n  for (var i = 0; i < result.entryCount; i++) {\n    var childId = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length - (offset - originalOffset)));\n    result.childElementIds.push(childId.toString());\n    offset += childId.bytesReadCount;\n  }\n  var remainingLength = length - (offset - originalOffset);\n  result.subFrames = this.readFrames(offset, offset + remainingLength, data, id3header);\n  return result;\n};\nframeReaderFunctions['COMM'] = function readCommentsFrame(offset, length, data, flags, id3header) {\n  var start = offset;\n  var charset = getTextEncoding(data.getByteAt(offset));\n  var language = data.getStringAt(offset + 1, 3);\n  var shortdesc = data.getStringWithCharsetAt(offset + 4, length - 4, charset);\n  offset += 4 + shortdesc.bytesReadCount;\n  var text = data.getStringWithCharsetAt(offset, start + length - offset, charset);\n  return {\n    language: language,\n    short_description: shortdesc.toString(),\n    text: text.toString()\n  };\n};\nframeReaderFunctions['COM'] = frameReaderFunctions['COMM'];\nframeReaderFunctions['PIC'] = function (offset, length, data, flags, id3header) {\n  return frameReaderFunctions['APIC'](offset, length, data, flags, id3header);\n};\nframeReaderFunctions['PCNT'] = function readCounterFrame(offset, length, data, flags, id3header) {\n  // FIXME: implement the rest of the spec\n  return data.getLongAt(offset, false);\n};\nframeReaderFunctions['CNT'] = frameReaderFunctions['PCNT'];\nframeReaderFunctions['T*'] = function readTextFrame(offset, length, data, flags, id3header) {\n  var charset = getTextEncoding(data.getByteAt(offset));\n  return data.getStringWithCharsetAt(offset + 1, length - 1, charset).toString();\n};\nframeReaderFunctions['TXXX'] = function readTextFrame(offset, length, data, flags, id3header) {\n  var charset = getTextEncoding(data.getByteAt(offset));\n  return getUserDefinedFields(offset, length, data, charset);\n};\nframeReaderFunctions['WXXX'] = function readUrlFrame(offset, length, data, flags, id3header) {\n  if (length === 0) {\n    return null;\n  }\n  var charset = getTextEncoding(data.getByteAt(offset));\n  return getUserDefinedFields(offset, length, data, charset);\n};\nframeReaderFunctions['W*'] = function readUrlFrame(offset, length, data, flags, id3header) {\n  if (length === 0) {\n    return null;\n  }\n  return data.getStringWithCharsetAt(offset, length, 'iso-8859-1').toString();\n};\nframeReaderFunctions['TCON'] = function readGenreFrame(offset, length, data, flags) {\n  var text = frameReaderFunctions['T*'].apply(this, arguments);\n  return text.replace(/^\\(\\d+\\)/, '');\n};\nframeReaderFunctions['TCO'] = frameReaderFunctions['TCON'];\nframeReaderFunctions['USLT'] = function readLyricsFrame(offset, length, data, flags, id3header) {\n  var start = offset;\n  var charset = getTextEncoding(data.getByteAt(offset));\n  var language = data.getStringAt(offset + 1, 3);\n  var descriptor = data.getStringWithCharsetAt(offset + 4, length - 4, charset);\n  offset += 4 + descriptor.bytesReadCount;\n  var lyrics = data.getStringWithCharsetAt(offset, start + length - offset, charset);\n  return {\n    language: language,\n    descriptor: descriptor.toString(),\n    lyrics: lyrics.toString()\n  };\n};\nframeReaderFunctions['ULT'] = frameReaderFunctions['USLT'];\nframeReaderFunctions['UFID'] = function readLyricsFrame(offset, length, data, flags, id3header) {\n  var ownerIdentifier = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\n  offset += ownerIdentifier.bytesReadCount;\n  var identifier = data.getBytesAt(offset, length - ownerIdentifier.bytesReadCount);\n  return {\n    ownerIdentifier: ownerIdentifier.toString(),\n    identifier: identifier\n  };\n};\nfunction getTextEncoding(bite) {\n  var charset;\n  switch (bite) {\n    case 0x00:\n      charset = 'iso-8859-1';\n      break;\n    case 0x01:\n      charset = 'utf-16';\n      break;\n    case 0x02:\n      charset = 'utf-16be';\n      break;\n    case 0x03:\n      charset = 'utf-8';\n      break;\n    default:\n      charset = 'iso-8859-1';\n  }\n  return charset;\n} // Handles reading description/data from either http://id3.org/id3v2.3.0#User_defined_text_information_frame\n// and http://id3.org/id3v2.3.0#User_defined_URL_link_frame\n\nfunction getUserDefinedFields(offset, length, data, charset) {\n  var userDesc = data.getStringWithCharsetAt(offset + 1, length - 1, charset);\n  var userDefinedData = data.getStringWithCharsetAt(offset + 1 + userDesc.bytesReadCount, length - 1 - userDesc.bytesReadCount, charset);\n  return {\n    user_description: userDesc.toString(),\n    data: userDefinedData.toString()\n  };\n}\nvar PICTURE_TYPE = [\"Other\", \"32x32 pixels 'file icon' (PNG only)\", \"Other file icon\", \"Cover (front)\", \"Cover (back)\", \"Leaflet page\", \"Media (e.g. label side of CD)\", \"Lead artist/lead performer/soloist\", \"Artist/performer\", \"Conductor\", \"Band/Orchestra\", \"Composer\", \"Lyricist/text writer\", \"Recording Location\", \"During recording\", \"During performance\", \"Movie/video screen capture\", \"A bright coloured fish\", \"Illustration\", \"Band/artist logotype\", \"Publisher/Studio logotype\"];\nmodule.exports = ID3v2FrameReader;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","MediaFileReader","require","StringUtils","ArrayFileReader","FRAME_DESCRIPTIONS","ID3v2FrameReader","value","getFrameReaderFunction","frameId","frameReaderFunctions","readFrames","offset","end","data","id3header","tags","frames","frameHeaderSize","_getFrameHeaderSize","header","_readFrameHeader","id","flags","frameSize","size","frameDataOffset","headerSize","frameData","indexOf","unsyncData","format","unsynchronisation","getUnsyncFileReader","getSize","data_length_indicator","readFrameFunc","parsedData","apply","desc","_getFrameDescription","frame","description","push","major","getStringAt","getInteger24At","getLongAt","getSynchsafeInteger32At","String","fromCharCode","_readFrameFlags","message","tag_alter_preservation","isBitSetAt","file_alter_preservation","read_only","grouping_identity","compression","encryption","getBytesAt","splice","readPictureFrame","start","charset","getTextEncoding","getByteAt","getStringWithCharsetAt","bytesReadCount","Error","bite","type","PICTURE_TYPE","toString","readChapterFrame","originalOffset","result","readNullTerminatedString","startTime","endTime","startOffset","endOffset","remainingLength","subFrames","readTableOfContentsFrame","childElementIds","undefined","topLevel","ordered","entryCount","childId","readCommentsFrame","language","shortdesc","text","short_description","readCounterFrame","readTextFrame","getUserDefinedFields","readUrlFrame","readGenreFrame","arguments","replace","readLyricsFrame","lyrics","ownerIdentifier","identifier","userDesc","userDefinedData","user_description","module","exports"],"sources":["/home/el_professor258/Documents/music/node_modules/jsmediatags/build2/ID3v2FrameReader.js"],"sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MediaFileReader = require('./MediaFileReader');\n\nvar StringUtils = require('./StringUtils');\n\nvar ArrayFileReader = require('./ArrayFileReader');\n\nvar FRAME_DESCRIPTIONS = {\n  // v2.2\n  \"BUF\": \"Recommended buffer size\",\n  \"CNT\": \"Play counter\",\n  \"COM\": \"Comments\",\n  \"CRA\": \"Audio encryption\",\n  \"CRM\": \"Encrypted meta frame\",\n  \"ETC\": \"Event timing codes\",\n  \"EQU\": \"Equalization\",\n  \"GEO\": \"General encapsulated object\",\n  \"IPL\": \"Involved people list\",\n  \"LNK\": \"Linked information\",\n  \"MCI\": \"Music CD Identifier\",\n  \"MLL\": \"MPEG location lookup table\",\n  \"PIC\": \"Attached picture\",\n  \"POP\": \"Popularimeter\",\n  \"REV\": \"Reverb\",\n  \"RVA\": \"Relative volume adjustment\",\n  \"SLT\": \"Synchronized lyric/text\",\n  \"STC\": \"Synced tempo codes\",\n  \"TAL\": \"Album/Movie/Show title\",\n  \"TBP\": \"BPM (Beats Per Minute)\",\n  \"TCM\": \"Composer\",\n  \"TCO\": \"Content type\",\n  \"TCR\": \"Copyright message\",\n  \"TDA\": \"Date\",\n  \"TDY\": \"Playlist delay\",\n  \"TEN\": \"Encoded by\",\n  \"TFT\": \"File type\",\n  \"TIM\": \"Time\",\n  \"TKE\": \"Initial key\",\n  \"TLA\": \"Language(s)\",\n  \"TLE\": \"Length\",\n  \"TMT\": \"Media type\",\n  \"TOA\": \"Original artist(s)/performer(s)\",\n  \"TOF\": \"Original filename\",\n  \"TOL\": \"Original Lyricist(s)/text writer(s)\",\n  \"TOR\": \"Original release year\",\n  \"TOT\": \"Original album/Movie/Show title\",\n  \"TP1\": \"Lead artist(s)/Lead performer(s)/Soloist(s)/Performing group\",\n  \"TP2\": \"Band/Orchestra/Accompaniment\",\n  \"TP3\": \"Conductor/Performer refinement\",\n  \"TP4\": \"Interpreted, remixed, or otherwise modified by\",\n  \"TPA\": \"Part of a set\",\n  \"TPB\": \"Publisher\",\n  \"TRC\": \"ISRC (International Standard Recording Code)\",\n  \"TRD\": \"Recording dates\",\n  \"TRK\": \"Track number/Position in set\",\n  \"TSI\": \"Size\",\n  \"TSS\": \"Software/hardware and settings used for encoding\",\n  \"TT1\": \"Content group description\",\n  \"TT2\": \"Title/Songname/Content description\",\n  \"TT3\": \"Subtitle/Description refinement\",\n  \"TXT\": \"Lyricist/text writer\",\n  \"TXX\": \"User defined text information frame\",\n  \"TYE\": \"Year\",\n  \"UFI\": \"Unique file identifier\",\n  \"ULT\": \"Unsychronized lyric/text transcription\",\n  \"WAF\": \"Official audio file webpage\",\n  \"WAR\": \"Official artist/performer webpage\",\n  \"WAS\": \"Official audio source webpage\",\n  \"WCM\": \"Commercial information\",\n  \"WCP\": \"Copyright/Legal information\",\n  \"WPB\": \"Publishers official webpage\",\n  \"WXX\": \"User defined URL link frame\",\n  // v2.3\n  \"AENC\": \"Audio encryption\",\n  \"APIC\": \"Attached picture\",\n  \"ASPI\": \"Audio seek point index\",\n  \"CHAP\": \"Chapter\",\n  \"CTOC\": \"Table of contents\",\n  \"COMM\": \"Comments\",\n  \"COMR\": \"Commercial frame\",\n  \"ENCR\": \"Encryption method registration\",\n  \"EQU2\": \"Equalisation (2)\",\n  \"EQUA\": \"Equalization\",\n  \"ETCO\": \"Event timing codes\",\n  \"GEOB\": \"General encapsulated object\",\n  \"GRID\": \"Group identification registration\",\n  \"IPLS\": \"Involved people list\",\n  \"LINK\": \"Linked information\",\n  \"MCDI\": \"Music CD identifier\",\n  \"MLLT\": \"MPEG location lookup table\",\n  \"OWNE\": \"Ownership frame\",\n  \"PRIV\": \"Private frame\",\n  \"PCNT\": \"Play counter\",\n  \"POPM\": \"Popularimeter\",\n  \"POSS\": \"Position synchronisation frame\",\n  \"RBUF\": \"Recommended buffer size\",\n  \"RVA2\": \"Relative volume adjustment (2)\",\n  \"RVAD\": \"Relative volume adjustment\",\n  \"RVRB\": \"Reverb\",\n  \"SEEK\": \"Seek frame\",\n  \"SYLT\": \"Synchronized lyric/text\",\n  \"SYTC\": \"Synchronized tempo codes\",\n  \"TALB\": \"Album/Movie/Show title\",\n  \"TBPM\": \"BPM (beats per minute)\",\n  \"TCOM\": \"Composer\",\n  \"TCON\": \"Content type\",\n  \"TCOP\": \"Copyright message\",\n  \"TDAT\": \"Date\",\n  \"TDLY\": \"Playlist delay\",\n  \"TDRC\": \"Recording time\",\n  \"TDRL\": \"Release time\",\n  \"TDTG\": \"Tagging time\",\n  \"TENC\": \"Encoded by\",\n  \"TEXT\": \"Lyricist/Text writer\",\n  \"TFLT\": \"File type\",\n  \"TIME\": \"Time\",\n  \"TIPL\": \"Involved people list\",\n  \"TIT1\": \"Content group description\",\n  \"TIT2\": \"Title/songname/content description\",\n  \"TIT3\": \"Subtitle/Description refinement\",\n  \"TKEY\": \"Initial key\",\n  \"TLAN\": \"Language(s)\",\n  \"TLEN\": \"Length\",\n  \"TMCL\": \"Musician credits list\",\n  \"TMED\": \"Media type\",\n  \"TMOO\": \"Mood\",\n  \"TOAL\": \"Original album/movie/show title\",\n  \"TOFN\": \"Original filename\",\n  \"TOLY\": \"Original lyricist(s)/text writer(s)\",\n  \"TOPE\": \"Original artist(s)/performer(s)\",\n  \"TORY\": \"Original release year\",\n  \"TOWN\": \"File owner/licensee\",\n  \"TPE1\": \"Lead performer(s)/Soloist(s)\",\n  \"TPE2\": \"Band/orchestra/accompaniment\",\n  \"TPE3\": \"Conductor/performer refinement\",\n  \"TPE4\": \"Interpreted, remixed, or otherwise modified by\",\n  \"TPOS\": \"Part of a set\",\n  \"TPRO\": \"Produced notice\",\n  \"TPUB\": \"Publisher\",\n  \"TRCK\": \"Track number/Position in set\",\n  \"TRDA\": \"Recording dates\",\n  \"TRSN\": \"Internet radio station name\",\n  \"TRSO\": \"Internet radio station owner\",\n  \"TSOA\": \"Album sort order\",\n  \"TSOP\": \"Performer sort order\",\n  \"TSOT\": \"Title sort order\",\n  \"TSIZ\": \"Size\",\n  \"TSRC\": \"ISRC (international standard recording code)\",\n  \"TSSE\": \"Software/Hardware and settings used for encoding\",\n  \"TSST\": \"Set subtitle\",\n  \"TYER\": \"Year\",\n  \"TXXX\": \"User defined text information frame\",\n  \"UFID\": \"Unique file identifier\",\n  \"USER\": \"Terms of use\",\n  \"USLT\": \"Unsychronized lyric/text transcription\",\n  \"WCOM\": \"Commercial information\",\n  \"WCOP\": \"Copyright/Legal information\",\n  \"WOAF\": \"Official audio file webpage\",\n  \"WOAR\": \"Official artist/performer webpage\",\n  \"WOAS\": \"Official audio source webpage\",\n  \"WORS\": \"Official internet radio station homepage\",\n  \"WPAY\": \"Payment\",\n  \"WPUB\": \"Publishers official webpage\",\n  \"WXXX\": \"User defined URL link frame\"\n};\n\nvar ID3v2FrameReader = /*#__PURE__*/function () {\n  function ID3v2FrameReader() {\n    _classCallCheck(this, ID3v2FrameReader);\n  }\n\n  _createClass(ID3v2FrameReader, null, [{\n    key: \"getFrameReaderFunction\",\n    value: function getFrameReaderFunction(frameId) {\n      if (frameId in frameReaderFunctions) {\n        return frameReaderFunctions[frameId];\n      } else if (frameId[0] === \"T\") {\n        // All frame ids starting with T are text tags.\n        return frameReaderFunctions[\"T*\"];\n      } else if (frameId[0] === \"W\") {\n        // All frame ids starting with W are url tags.\n        return frameReaderFunctions[\"W*\"];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * All the frames consists of a frame header followed by one or more fields\n     * containing the actual information.\n     * The frame ID made out of the characters capital A-Z and 0-9. Identifiers\n     * beginning with \"X\", \"Y\" and \"Z\" are for experimental use and free for\n     * everyone to use, without the need to set the experimental bit in the tag\n     * header. Have in mind that someone else might have used the same identifier\n     * as you. All other identifiers are either used or reserved for future use.\n     * The frame ID is followed by a size descriptor, making a total header size\n     * of ten bytes in every frame. The size is calculated as frame size excluding\n     * frame header (frame size - 10).\n     */\n\n  }, {\n    key: \"readFrames\",\n    value: function readFrames(offset, end, data, id3header, tags) {\n      var frames = {};\n\n      var frameHeaderSize = this._getFrameHeaderSize(id3header); // console.log('header', id3header);\n\n\n      while ( // we should be able to read at least the frame header\n      offset < end - frameHeaderSize) {\n        var header = this._readFrameHeader(data, offset, id3header);\n\n        var frameId = header.id; // No frame ID sometimes means it's the last frame (GTFO).\n\n        if (!frameId) {\n          break;\n        }\n\n        var flags = header.flags;\n        var frameSize = header.size;\n        var frameDataOffset = offset + header.headerSize;\n        var frameData = data; // console.log(offset, frameId, header.size + header.headerSize, flags && flags.format.unsynchronisation);\n        // advance data offset to the next frame data\n\n        offset += header.headerSize + header.size; // skip unwanted tags\n\n        if (tags && tags.indexOf(frameId) === -1) {\n          continue;\n        } // Workaround: MP3ext V3.3.17 places a non-compliant padding string at\n        // the end of the ID3v2 header. A string like \"MP3ext V3.3.19(ansi)\"\n        // is added multiple times at the end of the ID3 tag. More information\n        // about this issue can be found at\n        // https://github.com/aadsm/jsmediatags/issues/58#issuecomment-313865336\n\n\n        if (frameId === 'MP3e' || frameId === '\\x00MP3' || frameId === '\\x00\\x00MP' || frameId === ' MP3') {\n          break;\n        }\n\n        var unsyncData;\n\n        if (flags && flags.format.unsynchronisation && !id3header.flags.unsynchronisation) {\n          frameData = this.getUnsyncFileReader(frameData, frameDataOffset, frameSize);\n          frameDataOffset = 0;\n          frameSize = frameData.getSize();\n        } // the first 4 bytes are the real data size\n        // (after unsynchronisation && encryption)\n\n\n        if (flags && flags.format.data_length_indicator) {\n          // var frameDataSize = frameData.getSynchsafeInteger32At(frameDataOffset);\n          frameDataOffset += 4;\n          frameSize -= 4;\n        }\n\n        var readFrameFunc = ID3v2FrameReader.getFrameReaderFunction(frameId);\n        var parsedData = readFrameFunc ? readFrameFunc.apply(this, [frameDataOffset, frameSize, frameData, flags, id3header]) : null;\n\n        var desc = this._getFrameDescription(frameId);\n\n        var frame = {\n          id: frameId,\n          size: frameSize,\n          description: desc,\n          data: parsedData\n        };\n\n        if (frameId in frames) {\n          if (frames[frameId].id) {\n            frames[frameId] = [frames[frameId]];\n          }\n\n          frames[frameId].push(frame);\n        } else {\n          frames[frameId] = frame;\n        }\n      }\n\n      return frames;\n    }\n  }, {\n    key: \"_getFrameHeaderSize\",\n    value: function _getFrameHeaderSize(id3header) {\n      var major = id3header.major;\n\n      if (major == 2) {\n        return 6;\n      } else if (major == 3 || major == 4) {\n        return 10;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_readFrameHeader\",\n    value: function _readFrameHeader(data, offset, id3header) {\n      var major = id3header.major;\n      var flags = null;\n\n      var frameHeaderSize = this._getFrameHeaderSize(id3header);\n\n      switch (major) {\n        case 2:\n          var frameId = data.getStringAt(offset, 3);\n          var frameSize = data.getInteger24At(offset + 3, true);\n          break;\n\n        case 3:\n          var frameId = data.getStringAt(offset, 4);\n          var frameSize = data.getLongAt(offset + 4, true);\n          break;\n\n        case 4:\n          var frameId = data.getStringAt(offset, 4);\n          var frameSize = data.getSynchsafeInteger32At(offset + 4);\n          break;\n      }\n\n      if (frameId == String.fromCharCode(0, 0, 0) || frameId == String.fromCharCode(0, 0, 0, 0)) {\n        frameId = \"\";\n      } // if frameId is empty then it's the last frame\n\n\n      if (frameId) {\n        // read frame message and format flags\n        if (major > 2) {\n          flags = this._readFrameFlags(data, offset + 8);\n        }\n      }\n\n      return {\n        \"id\": frameId || \"\",\n        \"size\": frameSize || 0,\n        \"headerSize\": frameHeaderSize || 0,\n        \"flags\": flags\n      };\n    }\n  }, {\n    key: \"_readFrameFlags\",\n    value: function _readFrameFlags(data, offset) {\n      return {\n        message: {\n          tag_alter_preservation: data.isBitSetAt(offset, 6),\n          file_alter_preservation: data.isBitSetAt(offset, 5),\n          read_only: data.isBitSetAt(offset, 4)\n        },\n        format: {\n          grouping_identity: data.isBitSetAt(offset + 1, 7),\n          compression: data.isBitSetAt(offset + 1, 3),\n          encryption: data.isBitSetAt(offset + 1, 2),\n          unsynchronisation: data.isBitSetAt(offset + 1, 1),\n          data_length_indicator: data.isBitSetAt(offset + 1, 0)\n        }\n      };\n    }\n  }, {\n    key: \"_getFrameDescription\",\n    value: function _getFrameDescription(frameId) {\n      if (frameId in FRAME_DESCRIPTIONS) {\n        return FRAME_DESCRIPTIONS[frameId];\n      } else {\n        return 'Unknown';\n      }\n    }\n  }, {\n    key: \"getUnsyncFileReader\",\n    value: function getUnsyncFileReader(data, offset, size) {\n      var frameData = data.getBytesAt(offset, size);\n\n      for (var i = 0; i < frameData.length - 1; i++) {\n        if (frameData[i] === 0xff && frameData[i + 1] === 0x00) {\n          frameData.splice(i + 1, 1);\n        }\n      }\n\n      return new ArrayFileReader(frameData);\n    }\n  }]);\n\n  return ID3v2FrameReader;\n}();\n\n;\nvar frameReaderFunctions = {};\n\nframeReaderFunctions['APIC'] = function readPictureFrame(offset, length, data, flags, id3header) {\n  var start = offset;\n  var charset = getTextEncoding(data.getByteAt(offset));\n\n  switch (id3header && id3header.major) {\n    case 2:\n      var format = data.getStringAt(offset + 1, 3);\n      offset += 4;\n      break;\n\n    case 3:\n    case 4:\n      var format = data.getStringWithCharsetAt(offset + 1, length - 1);\n      offset += 1 + format.bytesReadCount;\n      break;\n\n    default:\n      throw new Error(\"Couldn't read ID3v2 major version.\");\n  }\n\n  var bite = data.getByteAt(offset);\n  var type = PICTURE_TYPE[bite];\n  var desc = data.getStringWithCharsetAt(offset + 1, length - (offset - start) - 1, charset);\n  offset += 1 + desc.bytesReadCount;\n  return {\n    \"format\": format.toString(),\n    \"type\": type,\n    \"description\": desc.toString(),\n    \"data\": data.getBytesAt(offset, start + length - offset)\n  };\n}; // ID3v2 chapters according to http://id3.org/id3v2-chapters-1.0\n\n\nframeReaderFunctions['CHAP'] = function readChapterFrame(offset, length, data, flags, id3header) {\n  var originalOffset = offset;\n  var result = {};\n  var id = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\n  result.id = id.toString();\n  offset += id.bytesReadCount;\n  result.startTime = data.getLongAt(offset, true);\n  offset += 4;\n  result.endTime = data.getLongAt(offset, true);\n  offset += 4;\n  result.startOffset = data.getLongAt(offset, true);\n  offset += 4;\n  result.endOffset = data.getLongAt(offset, true);\n  offset += 4;\n  var remainingLength = length - (offset - originalOffset);\n  result.subFrames = this.readFrames(offset, offset + remainingLength, data, id3header);\n  return result;\n}; // ID3v2 table of contents according to http://id3.org/id3v2-chapters-1.0\n\n\nframeReaderFunctions['CTOC'] = function readTableOfContentsFrame(offset, length, data, flags, id3header) {\n  var originalOffset = offset;\n  var result = {\n    childElementIds: [],\n    id: undefined,\n    topLevel: undefined,\n    ordered: undefined,\n    entryCount: undefined,\n    subFrames: undefined\n  };\n  var id = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\n  result.id = id.toString();\n  offset += id.bytesReadCount;\n  result.topLevel = data.isBitSetAt(offset, 1);\n  result.ordered = data.isBitSetAt(offset, 0);\n  offset++;\n  result.entryCount = data.getByteAt(offset);\n  offset++;\n\n  for (var i = 0; i < result.entryCount; i++) {\n    var childId = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length - (offset - originalOffset)));\n    result.childElementIds.push(childId.toString());\n    offset += childId.bytesReadCount;\n  }\n\n  var remainingLength = length - (offset - originalOffset);\n  result.subFrames = this.readFrames(offset, offset + remainingLength, data, id3header);\n  return result;\n};\n\nframeReaderFunctions['COMM'] = function readCommentsFrame(offset, length, data, flags, id3header) {\n  var start = offset;\n  var charset = getTextEncoding(data.getByteAt(offset));\n  var language = data.getStringAt(offset + 1, 3);\n  var shortdesc = data.getStringWithCharsetAt(offset + 4, length - 4, charset);\n  offset += 4 + shortdesc.bytesReadCount;\n  var text = data.getStringWithCharsetAt(offset, start + length - offset, charset);\n  return {\n    language: language,\n    short_description: shortdesc.toString(),\n    text: text.toString()\n  };\n};\n\nframeReaderFunctions['COM'] = frameReaderFunctions['COMM'];\n\nframeReaderFunctions['PIC'] = function (offset, length, data, flags, id3header) {\n  return frameReaderFunctions['APIC'](offset, length, data, flags, id3header);\n};\n\nframeReaderFunctions['PCNT'] = function readCounterFrame(offset, length, data, flags, id3header) {\n  // FIXME: implement the rest of the spec\n  return data.getLongAt(offset, false);\n};\n\nframeReaderFunctions['CNT'] = frameReaderFunctions['PCNT'];\n\nframeReaderFunctions['T*'] = function readTextFrame(offset, length, data, flags, id3header) {\n  var charset = getTextEncoding(data.getByteAt(offset));\n  return data.getStringWithCharsetAt(offset + 1, length - 1, charset).toString();\n};\n\nframeReaderFunctions['TXXX'] = function readTextFrame(offset, length, data, flags, id3header) {\n  var charset = getTextEncoding(data.getByteAt(offset));\n  return getUserDefinedFields(offset, length, data, charset);\n};\n\nframeReaderFunctions['WXXX'] = function readUrlFrame(offset, length, data, flags, id3header) {\n  if (length === 0) {\n    return null;\n  }\n\n  var charset = getTextEncoding(data.getByteAt(offset));\n  return getUserDefinedFields(offset, length, data, charset);\n};\n\nframeReaderFunctions['W*'] = function readUrlFrame(offset, length, data, flags, id3header) {\n  if (length === 0) {\n    return null;\n  }\n\n  return data.getStringWithCharsetAt(offset, length, 'iso-8859-1').toString();\n};\n\nframeReaderFunctions['TCON'] = function readGenreFrame(offset, length, data, flags) {\n  var text = frameReaderFunctions['T*'].apply(this, arguments);\n  return text.replace(/^\\(\\d+\\)/, '');\n};\n\nframeReaderFunctions['TCO'] = frameReaderFunctions['TCON'];\n\nframeReaderFunctions['USLT'] = function readLyricsFrame(offset, length, data, flags, id3header) {\n  var start = offset;\n  var charset = getTextEncoding(data.getByteAt(offset));\n  var language = data.getStringAt(offset + 1, 3);\n  var descriptor = data.getStringWithCharsetAt(offset + 4, length - 4, charset);\n  offset += 4 + descriptor.bytesReadCount;\n  var lyrics = data.getStringWithCharsetAt(offset, start + length - offset, charset);\n  return {\n    language: language,\n    descriptor: descriptor.toString(),\n    lyrics: lyrics.toString()\n  };\n};\n\nframeReaderFunctions['ULT'] = frameReaderFunctions['USLT'];\n\nframeReaderFunctions['UFID'] = function readLyricsFrame(offset, length, data, flags, id3header) {\n  var ownerIdentifier = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\n  offset += ownerIdentifier.bytesReadCount;\n  var identifier = data.getBytesAt(offset, length - ownerIdentifier.bytesReadCount);\n  return {\n    ownerIdentifier: ownerIdentifier.toString(),\n    identifier: identifier\n  };\n};\n\nfunction getTextEncoding(bite) {\n  var charset;\n\n  switch (bite) {\n    case 0x00:\n      charset = 'iso-8859-1';\n      break;\n\n    case 0x01:\n      charset = 'utf-16';\n      break;\n\n    case 0x02:\n      charset = 'utf-16be';\n      break;\n\n    case 0x03:\n      charset = 'utf-8';\n      break;\n\n    default:\n      charset = 'iso-8859-1';\n  }\n\n  return charset;\n} // Handles reading description/data from either http://id3.org/id3v2.3.0#User_defined_text_information_frame\n// and http://id3.org/id3v2.3.0#User_defined_URL_link_frame\n\n\nfunction getUserDefinedFields(offset, length, data, charset) {\n  var userDesc = data.getStringWithCharsetAt(offset + 1, length - 1, charset);\n  var userDefinedData = data.getStringWithCharsetAt(offset + 1 + userDesc.bytesReadCount, length - 1 - userDesc.bytesReadCount, charset);\n  return {\n    user_description: userDesc.toString(),\n    data: userDefinedData.toString()\n  };\n}\n\nvar PICTURE_TYPE = [\"Other\", \"32x32 pixels 'file icon' (PNG only)\", \"Other file icon\", \"Cover (front)\", \"Cover (back)\", \"Leaflet page\", \"Media (e.g. label side of CD)\", \"Lead artist/lead performer/soloist\", \"Artist/performer\", \"Conductor\", \"Band/Orchestra\", \"Composer\", \"Lyricist/text writer\", \"Recording Location\", \"During recording\", \"During performance\", \"Movie/video screen capture\", \"A bright coloured fish\", \"Illustration\", \"Band/artist logotype\", \"Publisher/Studio logotype\"];\nmodule.exports = ID3v2FrameReader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}