{"ast":null,"code":"var _jsxFileName = \"/home/el_professor258/Documents/minesweeper/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst generateEmptyGrid = (numRows, numCols) => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    grid.push(Array.from(Array(numCols), () => ({\n      isMine: false,\n      revealed: false,\n      neighborCount: 0\n    })));\n  }\n  return grid;\n};\nconst App = () => {\n  _s();\n  const [gridSize, setGridSize] = useState(null);\n  const [grid, setGrid] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [numBombs, setNumBombs] = useState(0);\n  const [time, setTime] = useState(0);\n  const timerRef = useRef(null);\n  const handleGridSizeSelection = size => {\n    setGridSize(size);\n    setGameStarted(false); // Reset gameStarted state when selecting a new grid size\n  };\n  useEffect(() => {\n    if (gridSize) {\n      const numRows = gridSize;\n      const numCols = gridSize;\n      const newGrid = generateEmptyGrid(numRows, numCols);\n      const numMines = Math.floor(numRows * numCols * 0.15); // Adjust mine density\n      setNumBombs(numMines);\n      for (let i = 0; i < numMines; i++) {\n        let randRow = Math.floor(Math.random() * numRows);\n        let randCol = Math.floor(Math.random() * numCols);\n        while (newGrid[randRow][randCol].isMine) {\n          randRow = Math.floor(Math.random() * numRows);\n          randCol = Math.floor(Math.random() * numCols);\n        }\n        newGrid[randRow][randCol].isMine = true;\n        updateNeighborCounts(newGrid, randRow, randCol);\n      }\n      setGrid(newGrid);\n    }\n  }, [gridSize]);\n  useEffect(() => {\n    if (gameStarted && !gameOver) {\n      timerRef.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [gameStarted, gameOver]);\n  const updateNeighborCounts = (grid, row, col) => {\n    const directions = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        grid[newRow][newCol].neighborCount++;\n      }\n    });\n  };\n  const revealCell = (row, col) => {\n    if (gameOver || grid[row][col].revealed) return;\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].revealed = true;\n    if (newGrid[row][col].isMine) {\n      setGameOver(true);\n    } else if (newGrid[row][col].neighborCount === 0) {\n      revealEmptyCells(newGrid, row, col);\n    }\n    setGrid(newGrid);\n  };\n  const revealEmptyCells = (grid, row, col) => {\n    const directions = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        if (!grid[newRow][newCol].revealed) {\n          grid[newRow][newCol].revealed = true;\n          if (grid[newRow][newCol].neighborCount === 0) {\n            revealEmptyCells(grid, newRow, newCol);\n          }\n        }\n      }\n    });\n  };\n  const restartGame = () => {\n    setGameOver(false);\n    setTime(0);\n    setGameStarted(false);\n    setGrid([]);\n    setGridSize(null);\n  };\n  const startGame = () => {\n    setGameStarted(true);\n  };\n  const renderCell = (row, col) => {\n    const cell = grid[row][col];\n    let content = '';\n    if (cell.revealed) {\n      if (cell.isMine) {\n        content = 'ðŸ’£';\n      } else if (cell.neighborCount > 0) {\n        content = cell.neighborCount;\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `cell ${cell.revealed ? 'revealed' : ''}`,\n      onClick: () => revealCell(row, col),\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Minesweeper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), gridSize === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGridSizeSelection(8),\n        children: \"8x8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGridSizeSelection(12),\n        children: \"12x12\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGridSizeSelection(16),\n        children: \"16x16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), gridSize && !gameStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startGame,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), gridSize && gameStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Bombs: \", numBombs]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Time: \", formatTime(time)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: renderCell(rowIndex, colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"C5vR4KUT3rFrRlHXTluh4AnCuc0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","generateEmptyGrid","numRows","numCols","grid","i","push","Array","from","isMine","revealed","neighborCount","App","_s","gridSize","setGridSize","setGrid","gameOver","setGameOver","gameStarted","setGameStarted","numBombs","setNumBombs","time","setTime","timerRef","handleGridSizeSelection","size","newGrid","numMines","Math","floor","randRow","random","randCol","updateNeighborCounts","current","setInterval","prevTime","clearInterval","row","col","directions","forEach","dRow","dCol","newRow","newCol","revealCell","JSON","parse","stringify","revealEmptyCells","restartGame","startGame","renderCell","cell","content","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","formatTime","seconds","minutes","remainingSeconds","map","rowIndex","colIndex","_c","$RefreshReg$"],"sources":["/home/el_professor258/Documents/minesweeper/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst generateEmptyGrid = (numRows, numCols) => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    grid.push(Array.from(Array(numCols), () => ({\n      isMine: false,\n      revealed: false,\n      neighborCount: 0\n    })));\n  }\n  return grid;\n}\n\nconst App = () => {\n  const [gridSize, setGridSize] = useState(null);\n  const [grid, setGrid] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [numBombs, setNumBombs] = useState(0);\n  const [time, setTime] = useState(0);\n\n  const timerRef = useRef(null);\n\n  const handleGridSizeSelection = (size) => {\n    setGridSize(size);\n    setGameStarted(false); // Reset gameStarted state when selecting a new grid size\n  };\n\n  useEffect(() => {\n    if (gridSize) {\n      const numRows = gridSize;\n      const numCols = gridSize;\n      const newGrid = generateEmptyGrid(numRows, numCols);\n      const numMines = Math.floor(numRows * numCols * 0.15); // Adjust mine density\n      setNumBombs(numMines);\n      for (let i = 0; i < numMines; i++) {\n        let randRow = Math.floor(Math.random() * numRows);\n        let randCol = Math.floor(Math.random() * numCols);\n        while (newGrid[randRow][randCol].isMine) {\n          randRow = Math.floor(Math.random() * numRows);\n          randCol = Math.floor(Math.random() * numCols);\n        }\n        newGrid[randRow][randCol].isMine = true;\n        updateNeighborCounts(newGrid, randRow, randCol);\n      }\n      setGrid(newGrid);\n    }\n  }, [gridSize]);\n\n  useEffect(() => {\n    if (gameStarted && !gameOver) {\n      timerRef.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [gameStarted, gameOver]);\n\n  const updateNeighborCounts = (grid, row, col) => {\n    const directions = [\n      [1, 0], [1, 1], [0, 1], [-1, 1],\n      [-1, 0], [-1, -1], [0, -1], [1, -1]\n    ];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        grid[newRow][newCol].neighborCount++;\n      }\n    });\n  };\n\n  const revealCell = (row, col) => {\n    if (gameOver || grid[row][col].revealed) return;\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].revealed = true;\n    if (newGrid[row][col].isMine) {\n      setGameOver(true);\n    } else if (newGrid[row][col].neighborCount === 0) {\n      revealEmptyCells(newGrid, row, col);\n    }\n    setGrid(newGrid);\n  };\n\n  const revealEmptyCells = (grid, row, col) => {\n    const directions = [\n      [1, 0], [1, 1], [0, 1], [-1, 1],\n      [-1, 0], [-1, -1], [0, -1], [1, -1]\n    ];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        if (!grid[newRow][newCol].revealed) {\n          grid[newRow][newCol].revealed = true;\n          if (grid[newRow][newCol].neighborCount === 0) {\n            revealEmptyCells(grid, newRow, newCol);\n          }\n        }\n      }\n    });\n  };\n\n  const restartGame = () => {\n    setGameOver(false);\n    setTime(0);\n    setGameStarted(false);\n    setGrid([]);\n    setGridSize(null);\n  };\n\n  const startGame = () => {\n    setGameStarted(true);\n  };\n\n  const renderCell = (row, col) => {\n    const cell = grid[row][col];\n    let content = '';\n    if (cell.revealed) {\n      if (cell.isMine) {\n        content = 'ðŸ’£';\n      } else if (cell.neighborCount > 0) {\n        content = cell.neighborCount;\n      }\n    }\n\n    return (\n      <div\n        className={`cell ${cell.revealed ? 'revealed' : ''}`}\n        onClick={() => revealCell(row, col)}\n      >\n        {content}\n      </div>\n    );\n  };\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Minesweeper</h1>\n      {gridSize === null && (\n        <div className=\"size-selection\">\n          <button onClick={() => handleGridSizeSelection(8)}>8x8</button>\n          <button onClick={() => handleGridSizeSelection(12)}>12x12</button>\n          <button onClick={() => handleGridSizeSelection(16)}>16x16</button>\n        </div>\n      )}\n      {gridSize && !gameStarted && (\n        <button onClick={startGame}>Start</button>\n      )}\n      {gridSize && gameStarted && (\n        <>\n          <div className=\"game-info\">\n            <div>Bombs: {numBombs}</div>\n            <div>Time: {formatTime(time)}</div>\n            <button onClick={restartGame}>Restart</button>\n          </div>\n          <div className=\"grid\">\n            {grid.map((row, rowIndex) => (\n              <div key={rowIndex} className=\"row\">\n                {row.map((cell, colIndex) => (\n                  <div key={colIndex}>\n                    {renderCell(rowIndex, colIndex)}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n          {gameOver && <h2>Game Over</h2>}\n        </>\n      )}\n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}