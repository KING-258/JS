{"ast":null,"code":"var _jsxFileName = \"/home/el_professor258/Documents/minesweeper/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst generateEmptyGrid = (numRows, numCols) => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    grid.push(Array.from(Array(numCols), () => ({\n      isMine: false,\n      revealed: false,\n      neighborCount: 0\n    })));\n  }\n  return grid;\n};\nconst App = () => {\n  _s();\n  const [gridSize, setGridSize] = useState(null);\n  const [grid, setGrid] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [numBombs, setNumBombs] = useState(0);\n  const [time, setTime] = useState(0);\n  const [suggestedCell, setSuggestedCell] = useState(null); // Added state for suggested cell\n\n  const timerRef = useRef(null);\n  const handleGridSizeSelection = size => {\n    setGridSize(size);\n    setGameStarted(false);\n  };\n  useEffect(() => {\n    if (gridSize) {\n      const numRows = gridSize;\n      const numCols = gridSize;\n      const newGrid = generateEmptyGrid(numRows, numCols);\n      const numMines = Math.floor(numRows * numCols * 0.15);\n      setNumBombs(numMines);\n      for (let i = 0; i < numMines; i++) {\n        let randRow = Math.floor(Math.random() * numRows);\n        let randCol = Math.floor(Math.random() * numCols);\n        while (newGrid[randRow][randCol].isMine) {\n          randRow = Math.floor(Math.random() * numRows);\n          randCol = Math.floor(Math.random() * numCols);\n        }\n        newGrid[randRow][randCol].isMine = true;\n        updateNeighborCounts(newGrid, randRow, randCol);\n      }\n      setGrid(newGrid);\n    }\n  }, [gridSize]);\n  useEffect(() => {\n    if (gameStarted && !gameOver) {\n      timerRef.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [gameStarted, gameOver]);\n  const updateNeighborCounts = (grid, row, col) => {\n    const directions = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        grid[newRow][newCol].neighborCount++;\n      }\n    });\n  };\n  const revealCell = (row, col) => {\n    if (gameOver || grid[row][col].revealed) return;\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].revealed = true;\n    if (newGrid[row][col].isMine) {\n      setGameOver(true);\n    } else if (newGrid[row][col].neighborCount === 0) {\n      revealEmptyCells(newGrid, row, col);\n    }\n    setGrid(newGrid);\n  };\n  const revealEmptyCells = (grid, row, col) => {\n    const directions = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        if (!grid[newRow][newCol].revealed) {\n          grid[newRow][newCol].revealed = true;\n          if (grid[newRow][newCol].neighborCount === 0) {\n            revealEmptyCells(grid, newRow, newCol);\n          }\n        }\n      }\n    });\n  };\n  const restartGame = () => {\n    setGameOver(false);\n    setTime(0);\n    setGameStarted(false);\n    setGrid([]);\n    setGridSize(null);\n  };\n  const startGame = () => {\n    setGameStarted(true);\n  };\n  const suggestMove = () => {\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        if (!grid[i][j].revealed && !grid[i][j].isMine) {\n          setSuggestedCell({\n            row: i,\n            col: j\n          });\n          return;\n        }\n      }\n    }\n  };\n  ;\n  const renderCell = (row, col) => {\n    const cell = grid[row][col];\n    let content = '';\n    if (cell.revealed) {\n      if (cell.isMine) {\n        content = 'ðŸ’£';\n      } else if (cell.neighborCount > 0) {\n        content = cell.neighborCount;\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `cell ${cell.revealed ? 'revealed' : ''} ${suggestedCell && suggestedCell.row === row && suggestedCell.col === col ? 'suggested' : ''}`,\n      onClick: () => revealCell(row, col),\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  };\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Minesweeper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), gridSize === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"size-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGridSizeSelection(8),\n        children: \"8x8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGridSizeSelection(12),\n        children: \"12x12\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGridSizeSelection(16),\n        children: \"16x16\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), gridSize && !gameStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startGame,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), gridSize && gameStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Bombs: \", numBombs]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Time: \", formatTime(time)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          children: \"Restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: suggestMove,\n          children: \"Suggest Move\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: renderCell(rowIndex, colIndex)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 19\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"ck73GHcp/Ukb//DY0XntwXO1Hj4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","generateEmptyGrid","numRows","numCols","grid","i","push","Array","from","isMine","revealed","neighborCount","App","_s","gridSize","setGridSize","setGrid","gameOver","setGameOver","gameStarted","setGameStarted","numBombs","setNumBombs","time","setTime","suggestedCell","setSuggestedCell","timerRef","handleGridSizeSelection","size","newGrid","numMines","Math","floor","randRow","random","randCol","updateNeighborCounts","current","setInterval","prevTime","clearInterval","row","col","directions","forEach","dRow","dCol","newRow","newCol","revealCell","JSON","parse","stringify","revealEmptyCells","restartGame","startGame","suggestMove","j","renderCell","cell","content","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","formatTime","seconds","minutes","remainingSeconds","map","rowIndex","colIndex","_c","$RefreshReg$"],"sources":["/home/el_professor258/Documents/minesweeper/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst generateEmptyGrid = (numRows, numCols) => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    grid.push(Array.from(Array(numCols), () => ({\n      isMine: false,\n      revealed: false,\n      neighborCount: 0\n    })));\n  }\n  return grid;\n}\n\nconst App = () => {\n  const [gridSize, setGridSize] = useState(null);\n  const [grid, setGrid] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [numBombs, setNumBombs] = useState(0);\n  const [time, setTime] = useState(0);\n  const [suggestedCell, setSuggestedCell] = useState(null); // Added state for suggested cell\n\n  const timerRef = useRef(null);\n\n  const handleGridSizeSelection = (size) => {\n    setGridSize(size);\n    setGameStarted(false); \n  };\n\n  useEffect(() => {\n    if (gridSize) {\n      const numRows = gridSize;\n      const numCols = gridSize;\n      const newGrid = generateEmptyGrid(numRows, numCols);\n      const numMines = Math.floor(numRows * numCols * 0.15); \n      setNumBombs(numMines);\n      for (let i = 0; i < numMines; i++) {\n        let randRow = Math.floor(Math.random() * numRows);\n        let randCol = Math.floor(Math.random() * numCols);\n        while (newGrid[randRow][randCol].isMine) {\n          randRow = Math.floor(Math.random() * numRows);\n          randCol = Math.floor(Math.random() * numCols);\n        }\n        newGrid[randRow][randCol].isMine = true;\n        updateNeighborCounts(newGrid, randRow, randCol);\n      }\n      setGrid(newGrid);\n    }\n  }, [gridSize]);\n\n  useEffect(() => {\n    if (gameStarted && !gameOver) {\n      timerRef.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current);\n  }, [gameStarted, gameOver]);\n\n  const updateNeighborCounts = (grid, row, col) => {\n    const directions = [\n      [1, 0], [1, 1], [0, 1], [-1, 1],\n      [-1, 0], [-1, -1], [0, -1], [1, -1]\n    ];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        grid[newRow][newCol].neighborCount++;\n      }\n    });\n  };\n\n  const revealCell = (row, col) => {\n    if (gameOver || grid[row][col].revealed) return;\n    const newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[row][col].revealed = true;\n    if (newGrid[row][col].isMine) {\n      setGameOver(true);\n    } else if (newGrid[row][col].neighborCount === 0) {\n      revealEmptyCells(newGrid, row, col);\n    }\n    setGrid(newGrid);\n  };\n\n  const revealEmptyCells = (grid, row, col) => {\n    const directions = [\n      [1, 0], [1, 1], [0, 1], [-1, 1],\n      [-1, 0], [-1, -1], [0, -1], [1, -1]\n    ];\n    directions.forEach(([dRow, dCol]) => {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        if (!grid[newRow][newCol].revealed) {\n          grid[newRow][newCol].revealed = true;\n          if (grid[newRow][newCol].neighborCount === 0) {\n            revealEmptyCells(grid, newRow, newCol);\n          }\n        }\n      }\n    });\n  };\n\n  const restartGame = () => {\n    setGameOver(false);\n    setTime(0);\n    setGameStarted(false);\n    setGrid([]);\n    setGridSize(null);\n  };\n\n  const startGame = () => {\n    setGameStarted(true);\n  };\n\n  const suggestMove = () => {\n    for (let i = 0; i < gridSize; i++) {\n      for (let j = 0; j < gridSize; j++) {\n        if (!grid[i][j].revealed && !grid[i][j].isMine) {\n          setSuggestedCell({ row: i, col: j });\n          return;\n        }\n      }\n    }\n  };\n  ;\n\n  const renderCell = (row, col) => {\n    const cell = grid[row][col];\n    let content = '';\n    if (cell.revealed) {\n      if (cell.isMine) {\n        content = 'ðŸ’£';\n      } else if (cell.neighborCount > 0) {\n        content = cell.neighborCount;\n      }\n    }\n\n    return (\n      <div\n        className={`cell ${cell.revealed ? 'revealed' : ''} ${suggestedCell && suggestedCell.row === row && suggestedCell.col === col ? 'suggested' : ''}`}\n        onClick={() => revealCell(row, col)}\n      >\n        {content}\n      </div>\n    );\n  };\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Minesweeper</h1>\n      {gridSize === null && (\n        <div className=\"size-selection\">\n          <button onClick={() => handleGridSizeSelection(8)}>8x8</button>\n          <button onClick={() => handleGridSizeSelection(12)}>12x12</button>\n          <button onClick={() => handleGridSizeSelection(16)}>16x16</button>\n        </div>\n      )}\n      {gridSize && !gameStarted && (\n        <button onClick={startGame}>Start</button>\n      )}\n      {gridSize && gameStarted && (\n        <>\n          <div className=\"game-info\">\n            <div>Bombs: {numBombs}</div>\n            <div>Time: {formatTime(time)}</div>\n            <button onClick={restartGame}>Restart</button>\n            <button onClick={suggestMove}>Suggest Move</button> {/* Added suggest move button */}\n          </div>\n          <div className=\"grid\">\n            {grid.map((row, rowIndex) => (\n              <div key={rowIndex} className=\"row\">\n                {row.map((cell, colIndex) => (\n                  <div key={colIndex}>\n                    {renderCell(rowIndex, colIndex)}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n          {gameOver && <h2>Game Over</h2>}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}