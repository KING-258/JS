{"ast":null,"code":"var _jsxFileName = \"/home/el_professor258/Documents/snake/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 20;\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [snake, setSnake] = useState([{\n    x: 10,\n    y: 10\n  }]);\n  const [food, setFood] = useState({\n    x: 15,\n    y: 15\n  });\n  const [direction, setDirection] = useState('RIGHT');\n  useEffect(() => {\n    const updateGrid = () => {\n      const newGrid = [];\n      for (let i = 0; i < GRID_SIZE; i++) {\n        const row = [];\n        for (let j = 0; j < GRID_SIZE; j++) {\n          row.push(0);\n        }\n        newGrid.push(row);\n      }\n      snake.forEach(segment => {\n        newGrid[segment.y][segment.x] = 1;\n      });\n      newGrid[food.y][food.x] = 2;\n      setGrid(newGrid);\n    };\n    updateGrid();\n  }, [snake, food]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      moveSnake();\n    }, 200);\n    return () => clearInterval(interval);\n  }, [snake]);\n  useEffect(() => {\n    const handleKeyPress = event => {\n      switch (event.key) {\n        case 'ArrowUp':\n          if (direction !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (direction !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (direction !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (direction !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [direction]);\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = {\n      ...newSnake[0]\n    };\n    switch (direction) {\n      case 'UP':\n        head.y = (head.y - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'DOWN':\n        head.y = (head.y + 1) % GRID_SIZE;\n        break;\n      case 'LEFT':\n        head.x = (head.x - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'RIGHT':\n        head.x = (head.x + 1) % GRID_SIZE;\n        break;\n      default:\n        break;\n    }\n    const collided = newSnake.slice(1).some(segment => segment.x === head.x && segment.y === head.y);\n    if (collided) {\n      // Game over\n      setSnake([{\n        x: 10,\n        y: 10\n      }]);\n      setDirection('RIGHT');\n      return;\n    }\n    newSnake.unshift(head);\n    if (head.x === food.x && head.y === food.y) {\n      generateFood();\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  };\n  const generateFood = () => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE)\n    };\n    setFood(newFood);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${cell === 1 ? 'snake' : cell === 2 ? 'food' : ''}`\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"PE0+P0h5fRLG4Nq3Ol7fjsLk6i8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GRID_SIZE","App","_s","grid","setGrid","snake","setSnake","x","y","food","setFood","direction","setDirection","updateGrid","newGrid","i","row","j","push","forEach","segment","interval","setInterval","moveSnake","clearInterval","handleKeyPress","event","key","document","addEventListener","removeEventListener","newSnake","head","collided","slice","some","unshift","generateFood","pop","newFood","Math","floor","random","className","children","map","rowIndex","cell","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/el_professor258/Documents/snake/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst GRID_SIZE = 20;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n  const [snake, setSnake] = useState([{ x: 10, y: 10 }]);\n  const [food, setFood] = useState({ x: 15, y: 15 });\n  const [direction, setDirection] = useState('RIGHT');\n\n  useEffect(() => {\n    const updateGrid = () => {\n      const newGrid = [];\n      for (let i = 0; i < GRID_SIZE; i++) {\n        const row = [];\n        for (let j = 0; j < GRID_SIZE; j++) {\n          row.push(0);\n        }\n        newGrid.push(row);\n      }\n      snake.forEach(segment => {\n        newGrid[segment.y][segment.x] = 1;\n      });\n      newGrid[food.y][food.x] = 2;\n      setGrid(newGrid);\n    };\n    updateGrid();\n  }, [snake, food]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      moveSnake();\n    }, 200);\n    return () => clearInterval(interval);\n  }, [snake]);\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      switch (event.key) {\n        case 'ArrowUp':\n          if (direction !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (direction !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (direction !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (direction !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [direction]);\n\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = { ...newSnake[0] };\n\n    switch (direction) {\n      case 'UP':\n        head.y = (head.y - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'DOWN':\n        head.y = (head.y + 1) % GRID_SIZE;\n        break;\n      case 'LEFT':\n        head.x = (head.x - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'RIGHT':\n        head.x = (head.x + 1) % GRID_SIZE;\n        break;\n      default:\n        break;\n    }\n\n    const collided = newSnake.slice(1).some(segment => segment.x === head.x && segment.y === head.y);\n    if (collided) {\n      // Game over\n      setSnake([{ x: 10, y: 10 }]);\n      setDirection('RIGHT');\n      return;\n    }\n\n    newSnake.unshift(head);\n    if (head.x === food.x && head.y === food.y) {\n      generateFood();\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n  };\n\n  const generateFood = () => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE)\n    };\n    setFood(newFood);\n  };\n\n  return (\n    <div className=\"App\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <div key={colIndex} className={`cell ${cell === 1 ? 'snake' : cell === 2 ? 'food' : ''}`}></div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}