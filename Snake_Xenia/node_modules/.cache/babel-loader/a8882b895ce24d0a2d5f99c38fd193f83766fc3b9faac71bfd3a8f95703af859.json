{"ast":null,"code":"var _jsxFileName = \"/home/el_professor258/Documents/snake/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 20;\nconst FrontPage = ({\n  onStart\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"front-page\",\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Snake Xenia\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onStart,\n    children: \"Start\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n_c = FrontPage;\nconst GameOverPage = ({\n  onRestart,\n  score\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-over-page\",\n  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Game Over!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Your Score: \", score]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onRestart,\n    children: \"Restart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c2 = GameOverPage;\nconst App = () => {\n  _s();\n  const [page, setPage] = useState('front');\n  const [grid, setGrid] = useState([]);\n  const [snake, setSnake] = useState([{\n    x: 10,\n    y: 10\n  }]);\n  const [food, setFood] = useState({\n    x: 15,\n    y: 15\n  });\n  const [direction, setDirection] = useState('RIGHT');\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const updateGrid = () => {\n      const newGrid = [];\n      for (let i = 0; i < GRID_SIZE; i++) {\n        const row = [];\n        for (let j = 0; j < GRID_SIZE; j++) {\n          row.push(0);\n        }\n        newGrid.push(row);\n      }\n      snake.forEach(segment => {\n        newGrid[segment.y][segment.x] = 1;\n      });\n      newGrid[food.y][food.x] = 2;\n      setGrid(newGrid);\n    };\n    updateGrid();\n  }, [snake, food]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      moveSnake();\n    }, 200);\n    return () => clearInterval(interval);\n  }, [snake]);\n  useEffect(() => {\n    const handleKeyPress = event => {\n      switch (event.key) {\n        case 'ArrowUp':\n          if (direction !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (direction !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (direction !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (direction !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [direction]);\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = {\n      ...newSnake[0]\n    };\n    switch (direction) {\n      case 'UP':\n        head.y = (head.y - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'DOWN':\n        head.y = (head.y + 1) % GRID_SIZE;\n        break;\n      case 'LEFT':\n        head.x = (head.x - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'RIGHT':\n        head.x = (head.x + 1) % GRID_SIZE;\n        break;\n      default:\n        break;\n    }\n\n    // Check for collision with walls\n    if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n      setPage('gameOver');\n      return;\n    }\n    const collided = newSnake.slice(1).some(segment => segment.x === head.x && segment.y === head.y);\n    if (collided) {\n      // Game over\n      setPage('gameOver');\n      return;\n    }\n    newSnake.unshift(head);\n    if (head.x === food.x && head.y === food.y) {\n      generateFood();\n      setScore(score + 1); // Increment score\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  };\n  const generateFood = () => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE)\n    };\n    setFood(newFood);\n  };\n  const handleStart = () => {\n    setPage('game');\n    setScore(0); // Reset score\n  };\n  const handleRestart = () => {\n    setPage('game');\n    setSnake([{\n      x: 10,\n      y: 10\n    }]);\n    setDirection('RIGHT');\n    setScore(0); // Reset score\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [page === 'front' && /*#__PURE__*/_jsxDEV(FrontPage, {\n      onStart: handleStart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 28\n    }, this), page === 'gameOver' && /*#__PURE__*/_jsxDEV(GameOverPage, {\n      onRestart: handleRestart,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 31\n    }, this), page === 'game' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell === 1 ? 'snake' : cell === 2 ? 'food' : ''}`\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Z7qG5Eaf2gBo+x7Z6oKa6LP31Sc=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FrontPage\");\n$RefreshReg$(_c2, \"GameOverPage\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GRID_SIZE","FrontPage","onStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","GameOverPage","onRestart","score","_c2","App","_s","page","setPage","grid","setGrid","snake","setSnake","x","y","food","setFood","direction","setDirection","setScore","updateGrid","newGrid","i","row","j","push","forEach","segment","interval","setInterval","moveSnake","clearInterval","handleKeyPress","event","key","document","addEventListener","removeEventListener","newSnake","head","collided","slice","some","unshift","generateFood","pop","newFood","Math","floor","random","handleStart","handleRestart","map","rowIndex","cell","colIndex","_c3","$RefreshReg$"],"sources":["/home/el_professor258/Documents/snake/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst GRID_SIZE = 20;\n\nconst FrontPage = ({ onStart }) => (\n  <div className=\"front-page\">\n    <h1>Snake Xenia</h1>\n    <button onClick={onStart}>Start</button>\n  </div>\n);\n\nconst GameOverPage = ({ onRestart, score }) => (\n  <div className=\"game-over-page\">\n    <h1>Game Over!</h1>\n    <p>Your Score: {score}</p>\n    <button onClick={onRestart}>Restart</button>\n  </div>\n);\n\nconst App = () => {\n  const [page, setPage] = useState('front');\n  const [grid, setGrid] = useState([]);\n  const [snake, setSnake] = useState([{ x: 10, y: 10 }]);\n  const [food, setFood] = useState({ x: 15, y: 15 });\n  const [direction, setDirection] = useState('RIGHT');\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    const updateGrid = () => {\n      const newGrid = [];\n      for (let i = 0; i < GRID_SIZE; i++) {\n        const row = [];\n        for (let j = 0; j < GRID_SIZE; j++) {\n          row.push(0);\n        }\n        newGrid.push(row);\n      }\n      snake.forEach(segment => {\n        newGrid[segment.y][segment.x] = 1;\n      });\n      newGrid[food.y][food.x] = 2;\n      setGrid(newGrid);\n    };\n    updateGrid();\n  }, [snake, food]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      moveSnake();\n    }, 200);\n    return () => clearInterval(interval);\n  }, [snake]);\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      switch (event.key) {\n        case 'ArrowUp':\n          if (direction !== 'DOWN') setDirection('UP');\n          break;\n        case 'ArrowDown':\n          if (direction !== 'UP') setDirection('DOWN');\n          break;\n        case 'ArrowLeft':\n          if (direction !== 'RIGHT') setDirection('LEFT');\n          break;\n        case 'ArrowRight':\n          if (direction !== 'LEFT') setDirection('RIGHT');\n          break;\n        default:\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [direction]);\n\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = { ...newSnake[0] };\n\n    switch (direction) {\n      case 'UP':\n        head.y = (head.y - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'DOWN':\n        head.y = (head.y + 1) % GRID_SIZE;\n        break;\n      case 'LEFT':\n        head.x = (head.x - 1 + GRID_SIZE) % GRID_SIZE;\n        break;\n      case 'RIGHT':\n        head.x = (head.x + 1) % GRID_SIZE;\n        break;\n      default:\n        break;\n    }\n\n    // Check for collision with walls\n    if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n      setPage('gameOver');\n      return;\n    }\n\n    const collided = newSnake.slice(1).some(segment => segment.x === head.x && segment.y === head.y);\n    if (collided) {\n      // Game over\n      setPage('gameOver');\n      return;\n    }\n\n    newSnake.unshift(head);\n    if (head.x === food.x && head.y === food.y) {\n      generateFood();\n      setScore(score + 1); // Increment score\n    } else {\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n  };\n\n  const generateFood = () => {\n    const newFood = {\n      x: Math.floor(Math.random() * GRID_SIZE),\n      y: Math.floor(Math.random() * GRID_SIZE)\n    };\n    setFood(newFood);\n  };\n\n  const handleStart = () => {\n    setPage('game');\n    setScore(0); // Reset score\n  };\n\n  const handleRestart = () => {\n    setPage('game');\n    setSnake([{ x: 10, y: 10 }]);\n    setDirection('RIGHT');\n    setScore(0); // Reset score\n  };\n\n  return (\n    <div className=\"App\">\n      {page === 'front' && <FrontPage onStart={handleStart} />}\n      {page === 'gameOver' && <GameOverPage onRestart={handleRestart} score={score} />}\n      {page === 'game' && (\n        <div className=\"game\">\n          {grid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"row\">\n              {row.map((cell, colIndex) => (\n                <div key={colIndex} className={`cell ${cell === 1 ? 'snake' : cell === 2 ? 'food' : ''}`}></div>\n              ))}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}